# =======================================================================================
#                                                                                 for All
#                                                                                 =======

# -------------------------------------------------------------------
#  P R O J E C T
# -------------------------------------------------------------------
# (Required)

torque.project = ldb


# -------------------------------------------------------------------
#  T A R G E T  D A T A B A S E
# -------------------------------------------------------------------
# This is the target database, only considered when generating
# the SQL for your Torque project. Your possible choices are:
#
#   axion, cloudscape, db2, db2400, hypersonic, interbase, mssql,
#   mysql, oracle, postgresql, sapdb, sybase, firebird, derby
# -------------------------------------------------------------------
# (Required)

torque.database = derby


# -------------------------------------------------------------------
#  O U T P U T  D I R E C T O R Y
# -------------------------------------------------------------------
# (Required)

torque.java.dir = ../..

# (NotRequired - Default '')
torque.java.location.for.gen		= /s2dao_gen_ldb_gen/src/main/java

# (NotRequired - Default '')
torque.java.location.for.main		= /s2dao_gen_ldb/src/main/java


# =======================================================================================
#                                                                             for OM task
#                                                                             ===========

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                            Basic
#                                                         _/_/_/_/

# /---------------------------------------------------------------------------
# [TargetLanguage] (NotRequired - Default 'java')
#   The target language. Your possible choices are:
#     java, csharp
torque.targetLanguage = java
# ----------------/

# /---------------------------------------------------------------------------
# [TemplateFileEncoding] (NotRequired - Default 'Windows-31J')
#   The encoding of Velocity template file.
#   For example, if you use Japanese in the template file,
#   you should set this property 'Windows-31J'.
torque.templateFileEncoding = Windows-31J
# ----------------/

# /---------------------------------------------------------------------------
# [ClassAuthor] (NotRequired - Default 'DBFlute(AutoGenerator)')
#   The value of the author tag in class javadoc.
#   All classes are target.
torque.classAuthor = DBFlute(AutoGenerator)
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                           Naming
#                                                         _/_/_/_/

# /---------------------------------------------------------------------------
# [JavaNameOfTableSameAsDbName] (NotRequired - Default 'false')
#   [true]
#     Java name of table is same as db name.
#       ex) If the table name is 'OrderDetail', then the java name is 'OrderDetail'.
#
#   [false]
#       ex) If the table name is 'ORDER_DETAIL', then the java name is 'OrderDetail'.
#       ex) If the table name is 'OrderDetail', then the java name is 'Orderdetail'.
#
torque.isJavaNameOfTableSameAsDbName = false
# ----------------/

# /---------------------------------------------------------------------------
# [JavaNameOfColumnSameAsDbName] (NotRequired - Default 'false')
#   [true]
#     Java name of column is same as db name.
#       ex) If the table name is 'OrderDetail', then the java name is 'OrderDetail'.
#
#   [false]
#       ex) If the table name is 'ORDER_DETAIL', then the java name is 'OrderDetail'.
#       ex) If the table name is 'OrderDetail', then the java name is 'Orderdetail'.
#
torque.isJavaNameOfColumnSameAsDbName = false
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                        Available
#                                                         _/_/_/_/

# /---------------------------------------------------------------------------
# [LazyLoad] (NotRequired - Default 'false')
#   [true]
#     LazyLoad is available. 'n:1' and '1:n' are supported.
#
#     *Attension:
#       LazyLoadContainer(Singleton) needs to save S2Container.
#       So your application must initialize it. (to set S2Container instance)
#
#   [false]
#     LazyLoad is not available. 
#
# *******************************************************
# * This property is deprecated! Please don't use this. *
# *******************************************************
torque.isAvailableEntityLazyLoad = false
# ----------------/

# /---------------------------------------------------------------------------
# [Behavior] (NotRequired - Default 'false')
#   [true]
#     Behavior classes are generated.
#
#   [false]
#     Behavior classes are not generated.
#     And proerties about behavior are invalid.
#
torque.isAvailableBehaviorGeneration = true
# ----------------/

# /---------------------------------------------------------------------------
# [BehaviorInterfacePrefixI] (NotRequired - Default 'false')
#   [true]
#     Behavior interface names are 'IXxxBhv'.
#     Behavior sub-class names are 'XxxBhv'.
#
#   [false]
#     Behavior interface names are 'XxxBhv'.
#     Behavior sub-class names are 'XxxBhvImpl'.
#
#   *{CSharp Only}
#
torque.isAvailableBehaviorInterfacePrefixI = false
# ----------------/

# /---------------------------------------------------------------------------
# [CommonColumnSetupInterceptorToBehavior] (NotRequired - Default 'false')
#   [true]
#     Add the interceptor 'CommonColumnSetup' to behavior.
#     Its pointcut is as follows:
#       - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#       delegateInsert.*, delegateCreate.*, delegateAdd.*
#       , delegateUpdate.*, delegateModify.*, delegateStore.*
#       , delegateDelete.*, delegateRemove.*
#       - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
#   [false]
#     Non.
#
#   *If isAvailableBehaviorGeneration is false, this property is ignored.
#
torque.isAvailableCommonColumnSetupInterceptorToBehavior = true
# ----------------/

# /---------------------------------------------------------------------------
# [CommonColumnSetupInterceptorToDao] (NotRequired - Default 'false')
#   [true]
#     Add the interceptor 'CommonColumnSetup' to dao.
#     Its pointcut is as follows:
#       - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#       insert.*, create.*, add.*, update.*, modify.*, store.*
#       , delete.*, remove.*
#       - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
#   [false]
#     Non.
#
torque.isAvailableCommonColumnSetupInterceptorToDao = false
# ----------------/

# /---------------------------------------------------------------------------
# [Generics] (NotRequired - Default 'true')
#   Default value is true.
#   [true]
#     Use Generics.
#
#   [false]
#     Non.
#
#   *{Java Only}
#
torque.isAvailableGenerics = true
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                Prefix and Suffix
#                                                 _/_/_/_/_/_/_/_/

# /---------------------------------------------------------------------------
# [PrefixAndSuffix]
#
#   projectPrefix: (NotRequired - Default null)
#     If the property is 'Ld', all class names are 'LdXxx'.
#
#   basePrefix: (NotRequired - Default 'Bs')
#     If the property is 'Bs', all base class names are 'LdBsXxx'.
#     Default value is 'Bs'.
#
#   projectSuffixForEntity: (NotRequired - Default null)
#     If the property is 'Gen', the name of base entity class is 'LdBsXxxGen'.
#     Default value is null.
#
torque.projectPrefix		= Ld
torque.basePrefix			= Bs
torque.baseSuffixForEntity	= 
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                            Dicon
#                                                             _/_/

# /---------------------------------------------------------------------------
# [DaoDicon Information]
#   daoDiconNamespace: (NotRequired - Default 'dao')
#     The namespace of dao dicon.
#
#   daoDiconPackageName: (NotRequired - Default null)
#     The package name of dao dicon.
#
#   daoDiconFileName: (NotRequired - Default 'dao.dicon')
#     The file name of dao dicon. (Required)
#
#   j2eeDiconResourceName: (NotRequired - Default 'j2ee.dicon')
#     The resource name of J2EE dicon.
#
#   requiredTxComponentName: (NotRequired - Default 'requiredTx')
#     The component name of 'requiredTx'-component.
#
#   daoDiconOtherIncludeDefinitionMap: (NotRequired - Default 'map:{}')
#     The definition map of dao-dicon's include path.
#     ex) map:{ dbflute/common.dicon = dummy }
#     
#     *Attension:
#        It is necessary that main dicon of application includes dao dicon.
#
torque.daoDiconNamespace		= dao
torque.daoDiconPackageName		= ../resources
torque.daoDiconFileName			= dao-ldb.dicon
torque.j2eeDiconResourceName	= j2ee-ldb.dicon
torque.requiredTxComponentName	= requiredTx
torque.daoDiconOtherIncludeDefinitionMap	= map:{}
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                          Package
#                                                             _/_/

# /---------------------------------------------------------------------------
# [EntityDao Package]
#     Default value is not defined. These properties are required.
torque.baseCommonPackage 		= dbflute.ldb.allcommon
torque.baseBehaviorPackage 		= dbflute.ldb.bsbhv
torque.baseDaoPackage 			= dbflute.ldb.bsdao
torque.baseEntityPackage 		= dbflute.ldb.bsentity
torque.conditionBeanPackage 	= dbflute.ldb.cbean
torque.extendedBehaviorPackage 	= dbflute.ldb.exbhv
torque.extendedDaoPackage 		= dbflute.ldb.exdao
torque.extendedEntityPackage 	= dbflute.ldb.exentity
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                          Adavane
#                                                             _/_/

# /---------------------------------------------------------------------------
# [Sequence & Identity] (NotRequired - Default 'map:{}')
#   sequenceDefinitionMap: (NotNull - map-property or empty(map:{}))
#     The method 'XxxDao#selectNextVal()' is generated for its table primary key.
#
#       ex) public String selectNextVal_SQL = "select gen_id(BOOK_BOOK_ID_INC, 1) from RDB$DATABASE";
#           public java.math.BigInteger selectNextVal();
#           // This example is for the database of Firebird
# 
#   identityDefinitionMap: (NotRequired - Default 'map:{}')
#     ID annotation of s2dao is generated for its table primary key.
#
#       ex) public static final String bookId_ID = "identity";
#
torque.sequenceDefinitionMap	= map:{	\
		AUTHOR	= AUTHOR_AUTHOR_ID_INC	\
		; BOOK	= BOOK_BOOK_ID_INC		\
	}
torque.identityDefinitionMap	= map:{	\
		AUTHOR	=	AUTHOR_ID	\
		; BOOK	=	BOOK_ID	\
		; COLLECTION	=	COLLECTION_ID	\
	}
# ----------------/

# /--------------------------------------------------------------------------
# [Optimistic Lock]
#   updateDateFieldName: (NotRequired - Default null)
#     The field name of update-date. 
#     For example, if this property id 'UPDATE_DATE',
#     the annotation is generated as follows:
#       public static final String TIMESTAMP_PROPERTY = "updateDate";
#
#   updateDateExceptTableList: (NotRequired - Default list:{})
#     ex) list:{ prefix:LB_ }
#
#   versionNoFieldName: (NotRequired - Default null)
#     The field name of version-no. 
#     For example, if this property id 'VERSION_NO'
#     the annotation is generated as follows:
#       public static final String VERSION_NO_PROPERTY = "versionNo";
#
torque.updateDateFieldName	= U_TIME
torque.updateDateExceptTableList = list:{ prefix:LB_ }
torque.versionNoFieldName	= null
# ----------------/

# /---------------------------------------------------------------------------
# [Common Column]
#   commonColumnMap: (NotRequired - Default 'map:{}')
#     The map of common column.
#     Default value is enmpty-map.
#     For example, The date you registered the record, The staff who updated the record and so on...
#
#     ex) map:{R_TIME=TIMESTAMP;U_TIME=TIMESTAMP;R_STAFF=VARCHAR;U_STAFF=VARCHAR}
#
#   commonColumnSetupBeforeInsertInterceptorLogicMap: (NotNull - map-property or empty(map:{}))
#   commonColumnSetupBeforeUpdateInterceptorLogicMap: (NotNull - map-property or empty(map:{}))
#   commonColumnSetupBeforeDeleteInterceptorLogicMap: (NotNull - map-property or empty(map:{}))
#     (NotRequired - Default 'map:{}')
#     ex) map:{ \
#           R_TIME=new java.sql.Timestamp(System.currentTimeMillis()) \
#           ; R_STAFF=$entity.classifyRStaffAdministrator()$$Semicolon$$ \
#           ; U_STAFF=entity.getRStaff() \
#         }
#     ex) map:{ \
#           U_STAFF="update-interceptor" \
#         }
#      *Normally, setting login user from session. (This is a sample to the end.)
#
torque.commonColumnMap = map:{R_TIME=TIMESTAMP;U_TIME=TIMESTAMP;R_STAFF=VARCHAR;U_STAFF=VARCHAR}

torque.commonColumnSetupBeforeInsertInterceptorLogicMap = map:{ \
        R_TIME=new java.sql.Timestamp(System.currentTimeMillis()) \
        ; R_STAFF=$entity.classifyRStaffAdministrator()$$Semicolon$$ \
        ; U_STAFF=entity.getRStaff() \
    }

torque.commonColumnSetupBeforeUpdateInterceptorLogicMap = map:{ \
        U_STAFF="update-interceptor" \
    }

torque.commonColumnSetupBeforeDeleteInterceptorLogicMap = map:{}
# ----------------/

# /---------------------------------------------------------------------------
# [Logical Delete Column]
#   logicalDeleteColumnValueMap: (NotRequired - Default 'map:{}')
#     If you set this property, the method 'logicalDeleteXxx()' is generated at behavior-class.
#     The method set up the logical-delete-column as delete by this property.
#
#     ex) map:{ \
#           DEL_DATE=new java.sql.Timestamp(System.currentTimeMillis()) \
#           ; DEL_FLG="y" \
#         }
#
#   *If isAvailableBehaviorGeneration is false, this property is ignored.
#
#   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#   *Attension: If common-column contains these logical-delete-columns
#    , the interceptor may override their values.  For example, as follows:
#
#      ex)
#        commonColumnSetupBeforeUpdateInterceptorLogicMap = map:{DEL_FLG="n"}
#        logicalDeleteColumnValueMap = map:{DEL_FLG="y"}
#
#        1. Invoking logicalDeleteXxx(), DEL_FLG is set up by 'y'.
#        2. Invoking delegateUpdate() in logicalDeleteXxx(), DEL_FLG is overrided by 'n' by interceptor.
#
#        So you should do this way:
#
#        commonColumnSetupBeforeUpdateInterceptorLogicMap = map:{DEL_FLG=("y".equals(entity.getDelFlg()) ? "y" : "n")}
#        logicalDeleteColumnValueMap = map:{DEL_FLG="y"}
#
#        The event 'Deleted' should be given priority.
#   - - - - - - - - - - - - - - - - - - - - - - - - - -
#
#   revivalFromLogicalDeleteColumnValueMap: (NotRequired - Default 'map:{}')
#     If you set this property, the method 'revivalFromLogicalDeleteXxx()' is generated at behavior-class.
#     The method set up the logical-delete-column as non-delete by this property.
#
#     ex) map:{ \
#           DEL_DATE=null \
#           ; DEL_FLG="n" \
#         }
#
torque.logicalDeleteColumnValueMap = map:{}
torque.revivalFromLogicalDeleteColumnValueMap = map:{}
# ----------------/

# /---------------------------------------------------------------------------
# [Classification]
#   classificationDefinitionMap: (NotRequired - Default 'map:{}')
#
#     ex) map:{ \
#        CollectionStatus   =   list:{ \
#                                    map:{code=C10;name=ArrivalWait;alias=\u5165\u8377\u5f85\u3061} \
#                                    ; map:{code=C20;name=LendingOk;alias=\u8cb8\u3057\u51fa\u3057OK} \
#                               } \
#        ; BlackAction      =    list:{ \
#                                    map:{code=DRY;name=Destoroy;alias=\u7834\u58ca} \
#                                    ; map:{code=LST;name=Losting;alias=\u7d1b\u5931} \
#                                } \
#        }
#
#   classificationDeploymentMap: (NotRequired - Default 'map:{}')
#
#     ex) map:{ \
#            COLLECTION_STATUS          =    map:{COLLECTION_STATUS_CODE=CollectionStatus} \
#            ; COLLECTION_STATUS_LOOKUP =    map:{COLLECTION_STATUS_CODE=CollectionStatus} \
#            ; BLACK_ACTION             =    map:{BLACK_ACTION_CODE=BlackAction} \
#            ; BLACK_ACTION_LOOKUP      =    map:{BLACK_ACTION_CODE=BlackAction} \
#            ; $$ALL$$                  =    map:{R_STAFF=Staff;U_STAFF=Staff} \
#         }
#
torque.classificationDefinitionMap = map:{ \
		CollectionStatus	=	list:{ \
									map:{code=C10;name=ArrivalWait;alias=\u5165\u8377\u5f85\u3061} \
									; map:{code=C20;name=LendingOk;alias=\u8cb8\u3057\u51fa\u3057OK} \
								} \
		; BlackAction		=	list:{ \
									map:{code=DRY;name=Destoroy;alias=\u7834\u58ca} \
									; map:{code=LST;name=Losting;alias=\u7d1b\u5931} \
								} \
		; Staff				=	list:{ \
									map:{code=ADM;name=Administrator;alias=\u7ba1\u7406\u8005} \
									; map:{code=USR;name=User;alias=\u30e6\u30fc\u30b6} \
									; map:{code=UTS;name=UtterStranger;alias=\u8d64\u306e\u4ed6\u4eba} \
								} \
	}

torque.classificationDeploymentMap = map:{ \
		COLLECTION_STATUS			=	map:{COLLECTION_STATUS_CODE=CollectionStatus} \
		; COLLECTION_STATUS_LOOKUP	=	map:{COLLECTION_STATUS_CODE=CollectionStatus} \
		; BLACK_ACTION				=	map:{BLACK_ACTION_CODE=BlackAction} \
		; BLACK_ACTION_LOOKUP		=	map:{BLACK_ACTION_CODE=BlackAction} \
		; $$ALL$$					=	map:{R_STAFF=Staff;U_STAFF=Staff} \
	}
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                     Select Param
#                                                     _/_/_/_/_/_/

# /---------------------------------------------------------------------------
# [DefaultFetchSize] (NotRequired - Default '20')
#   The default fetch size of sql-clause(condition-bean) 
#   when invoking fetchPage() without fetchFirst() or fetchScope(). 
#   This is for fetchPage().
#
torque.fetchPageDefaultFetchSize = 20
# ----------------/

# /---------------------------------------------------------------------------
# [DefaultPageGroupSize] (NotRequired - Default '10')
#   The default page group size of page-result-bean. 
torque.pageResultBeanDefaultPageGroupSize = 2
# ----------------/

# /---------------------------------------------------------------------------
# [UseAbsoluteWhenResultSetFetchNarrowing] (NotRequired - Default 'true')
#   This is for fetchFirst() & fetchSceop() & fetchPage().
#   If your database supports 'fetchStartIndex' and 'fetchSize', this property is irrelevant.
#   If your database doesn't support cursol, this property is irrelevant.
#   [true]
#     Use absolute when result set fetch-narrowing.
#
#   [false]
#     Non.
#
torque.isAvailableUseAbsoluteWhenResultSetFetchNarrowing = true
# ----------------/

# /---------------------------------------------------------------------------
# [SelectQueryTimeout] (NotRequired - Default '-1')
torque.selectQueryTimeout = -1
# ----------------/

# /---------------------------------------------------------------------------
# [StatementResultSetType] (NotRequired - Default '')
#
#   *{Java Only}
#
torque.statementResultSetType = ResultSet.TYPE_SCROLL_INSENSITIVE
# ----------------/

# /---------------------------------------------------------------------------
# [StatementResultSetConcurrency] (NotRequired - Default '')
#
#   *{Java Only}
#
torque.statementResultSetConcurrency = ResultSet.CONCUR_READ_ONLY
# ----------------/


# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                     CustomizeDao
#                                                     _/_/_/_/_/_/

# /---------------------------------------------------------------------------
# [CustomizeDao]
#   customizeDaoDefinitionMap: (NotRequired - Default 'map:{}')
#
# columnMap: 
#   key   = Column name. (db-name)
#   value = Torque type
#     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#     CHAR, VARCHAR, LONGVARCHAR, NUMERIC, DECIMAL, BIT, TINYINT, SMALLINT
#     , INTEGER, BIGINT, REAL, FLOAT, DOUBLE, BINARY, VARBINARY, LONGVARBINARY
#     , DATE, TIME, TIMESTAMP
#     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -    
#
# importMap: 
#   key   = import clause.
#   value = dummy (unused)
#
# methodMap: 
#   key   = Method name.
#             If the name starts with 'selectEntity' or 'readEntity'
#             , method return type is 'Entity'. Else java.util.List. 
#   value = Method argument.
#
torque.customizeDaoDefinitionMap = map:{ \
		BOOK_AUTHOR = map:{ \
			columnMap = map:{*BOOK_ID=VARCHAR;BOOK_NAME=VARCHAR;AUTHOR_NAME=VARCHAR} \
			; importMap = map:{ \
				import dbflute.ldb.allcommon.cbean.LdSimplePagingBean = dummy \
				; import dbflute.ldb.allcommon.cbean.sqlclause.LdOrderByClause = dummy \
			} \
			; methodMap = map:{ \
				selectEntity=String bookId \
				; selectList=String bookNamePrefix \
			} \
			; relationMap = map:{ \
				tableName=BOOK \
			} \
		} \
		; BOOK_PUBLISHER = map:{ \
			columnMap = map:{*BOOK_ID=VARCHAR;BOOK_NAME=VARCHAR;PUBLISHER_NAME=VARCHAR} \
			; importMap = map:{ \
			} \
			; methodMap = map:{ \
				selectEntity=String bookId \
				; selectList=String bookNamePrefix \
			} \
			; relationMap = map:{ \
				tableName=BOOK \
			} \
		} \
	}
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                     OriginalBean
#                                                     _/_/_/_/_/_/

# /---------------------------------------------------------------------------
# [SqlParameterBean Definition]
#
torque.sqlParameterBeanPackage = 
torque.sqlParameterBeanDefinitionMap = map:{}
# ----------------/

# /---------------------------------------------------------------------------
# [ArgumentBean Definition]
#
torque.arguemntBeanPackage = 
torque.arguemntBeanDefinitionMap = map:{}
torque.argumentBeanRelatedSqlParameterMap = map:{}
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                Extract Component
#                                                     _/_/_/_/_/_/


# /---------------------------------------------------------------------------
# [ExtractAccept Protocol]
#   extractAcceptStartBrace: (NotRequired - Default '@{')
#   extractAcceptEndBrace: (NotRequired - Default '@}')
#   extractAcceptDelimiter: (NotRequired - Default '@;')
#   extractAcceptEqual: (NotRequired - Default '@=')
torque.extractAcceptStartBrace = @{
torque.extractAcceptEndBrace = @}
torque.extractAcceptDelimiter = @;
torque.extractAcceptEqual = @=
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                            Additional ForeignKey
#                                                     _/_/_/_/_/_/

# /---------------------------------------------------------------------------
# [Additional ForeignKey]
torque.additionalForeignKeyMap = map:{}
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                    Dicon Setting
#                                                     _/_/_/_/_/_/

# /---------------------------------------------------------------------------
# [Original Dao Component]
#
# ex) map:{ authInfosCreater = map:{ className=MspadminBiz.Dao.Original.AuthInfosCreaterImpl } }
#
torque.originalDaoComponentMap = map:{}
# ----------------/

# /---------------------------------------------------------------------------
# [Original Behavior Aspect]
#
# ex) map:{ shopIdConditionAppendInterceptor = map:{ \
#                   className=MspadminBiz.Dao.Original.ShopIdConditionAppendInterceptor \
#                   ; pointcut=DelegateRead.*, DelegateSelect.* \
#               } \
#     }
#
torque.originalBehaviorAspectMap = map:{}
# ----------------/

# =======================================================================================
#                                                                           for JDBC task
#                                                                           =============
#
#   *Attension: If you use oracle and db2 and derby, schema must be UpperCase.
#
torque.database.driver		= org.apache.derby.jdbc.EmbeddedDriver
torque.database.url			= jdbc:derby:/project/seasar/s2dao_gen_ldb/src/test/resources/data-derby
torque.database.host		= localhost
torque.database.schema		= LDB
torque.database.user		= ldb
torque.database.password	= ldb

# Target database types: (NotNull - list:{TABLE;VIEW;...})
#   Default value is 'list:{TABLE;VIEW}'.
#
torque.database.type.list = list:{TABLE;VIEW}

# Unnecessary tables: (NotNull - list:{TABLE_HINT;TABLE_HINT})
#   Default value is empty-list.
#
#   For example, if you want to except the table that the name starts with 'D_',
#   you should set this property as follows:
#     ex) list:{prefix:D_}
#
#   And other example:
#     ex) list:{prefix:D_; suffix:_Test; sysobjects; dtproperties}
#
torque.table.except.list = list:{}

# Target tables: (NotNull - list:{TABLE_HINT;TABLE_HINT})
#   Default value is empty-list(All tables are target).
#   If this property is empty-list, the property of [Unnecessary tables] is valid.
#
#   For example, if you want to contains the table that the name starts with 'D_',
#   you should set this property as follows:
#     ex) list:{prefix:D_}
#
#   And other example:
#     ex) list:{prefix:D_; suffix:_Test; sysobjects; dtproperties}
#
#   If the table defined at this property is defined at [Unnecessary tables] too,
#   the table is target of generating.
#
torque.table.target.list = list:{}


# =======================================================================================
#                                                                            for Internal
#                                                                            ============
# Normally you don't need to change these properties.

#
# [JDBC to java-native mapping] (NotRequired - Default 'map:{}')
#
# ex) map:{INTEGER=java.lang.Integer;TIMESTAMP=java.util.Date}
# ex) map:{} // If you don't want to change...
#
# Default mapping as follows:
# * ------------------------------------------------------------------
# * Torque Type   | Java Type            | CSharp Type               |
# * ------------------------------------------------------------------
# * CHAR          | java.lang.String     | String                    |
# * VARCHAR       | java.lang.String     | String                    |
# * LONGVARCHAR   | java.lang.String     | String                    |
# * NUMERIC       | java.math.BigDecimal | Nullables.NullableDecimal |
# * DECIMAL       | java.math.BigDecimal | Nullables.NullableDecimal |
# * BIT           | java.lang.Boolean    | Nullables.NullableBoolean |
# * TINYINT       | java.math.BigDecimal | Nullables.NullableDecimal |
# * SMALLINT      | java.math.BigDecimal | Nullables.NullableDecimal |
# * INTEGER       | java.math.BigDecimal | Nullables.NullableDecimal |
# * BIGINT        | java.math.BigDecimal | Nullables.NullableDecimal |
# * REAL          | java.math.BigDecimal | Nullables.NullableDecimal |
# * FLOAT         | java.math.BigDecimal | Nullables.NullableDecimal |
# * DOUBLE        | java.math.BigDecimal | Nullables.NullableDecimal |
# * BINARY        | byte[]               | byte[]                    |
# * VARBINARY     | byte[]               | byte[]                    |
# * LONGVARBINARY | byte[]               | byte[]                    |
# * DATE          | java.util.Date       | Nullables.NullableDateTime|
# * TIME          | java.sql.Time        | Nullables.NullableDateTime|
# * TIMESTAMP     | java.sql.Timestamp   | Nullables.NullableDateTime|
# *
# * ------------------------------------------------------------------
# * A couple variations have been introduced to cover cases
# * that may arise, but are not covered above.
# * BOOLEANCHAR   | java.lang.Boolean    |
# * BOOLEANINT    | OR java.lang.Boolean |
# *
torque.jdbcToJavaNativeMap = map:{}

# [The list of java-native that treated as String] (NotRequired - Default 'list:{}')
#   *This property overrides all-default-value.
#
#   Default list as follows: (When you set this empty)
#     Java{String} / CSharp{String}
#
torque.javaNativeStringList = list:{}

# [The list of java-native that treated as Boolean] (NotRequired - Default 'list:{}')
#   *This property overrides all-default-value.
#
#   Default list as follows: (When you set this empty)
#     Java{Boolean} / CSharp{Nullables.NullableBoolean}
#
torque.javaNativeBooleanList = list:{}

# [The list of java-native that treated as Number] (NotRequired - Default 'list:{}')
#   *This property overrides all-default-value.
#
#   Default list as follows: (When you set this empty)
#     Java{Byte, Short, Integer, Long, Float, Double, BigDecimal, BigInteger} / CSharp{Nullables.NullableDecimal}
#
torque.javaNativeNumberList = list:{}

# [The list of java-native that treated as Date] (NotRequired - Default 'list:{}')
#   *This property overrides all-default-value.
#
#   Default list as follows: (When you set this empty)
#     Java{Date, Time, Timestamp} / CSharp{Nullables.NullableDateTime}
#
torque.javaNativeDateList = list:{}

# [The list of java-native that treated as Binary] (NotRequired - Default 'list:{}')
#   *This property overrides all-default-value.
#
#   Default list as follows: (When you set this empty)
#     byte[]
#
torque.javaNativeBinaryList = list:{}


# /---------------------------------------------------------------------------
# [ToLowerInGeneratorUnderscoreMethod] (NotRequired - Default 'true')
#   [true]
#
#   [false]
#
torque.isAvailableToLowerInGeneratorUnderscoreMethod = true
# ----------------/




# =======================================================================================
#                                                                             for PlaySql
#                                                                             ===========
# /---------------------------------------------------------------------------
# [Replace Schema] (NotRequired - Default 'map:{}')
#   invokeReplaceSchemaDefinitionMap: (NotRequired - Default 'map:{}')
#
#     ex) map:{ torque.invokeReplaceSchemaDefinitionMap = map:{ \
#            isAutoCommit = false \
#            ; isRollbackOnly = false \
#            ; isErrorContinue = false \
#            ; sqlFile = ./playsql/replace-schema.sql \
#         }
#
#   invokeSqlDirectoryDefinitionMap: (NotRequired - Default 'map:{}')
#
#     ex) map:{ torque.invokeSqlDirectoryDefinitionMap = map:{ \
#            isAutoCommit = false \
#            ; isRollbackOnly = false \
#            ; isErrorContinue = false \
#            ; sqlDirectory = ./playsql \
#         }
#
torque.invokeReplaceSchemaDefinitionMap = map:{ \
	isAutoCommit = false \
	; isRollbackOnly = false \
	; isErrorContinue = true \
	; sqlFile = ./playsql/replace-schema.sql \
}

torque.invokeSqlDirectoryDefinitionMap = map:{ \
	isAutoCommit = false \
	; isRollbackOnly = true \
	; isErrorContinue = false \
	; sqlDirectory = ./playsql \
}
