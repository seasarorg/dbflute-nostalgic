#set ($myClassName = "${glBehaviorWritableAbstractName}")

using System;
using System.Collections;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonHelper};

namespace ${glPackageBaseCommonBhv} {

    /**
     * The abstract class of behavior-writable.
     * 
     * @author ${database.ClassAuthor}
     */
    public abstract class $myClassName : ${glBehaviorReadableAbstractName}, ${glBehaviorWritableInterfaceName} {

        // =====================================================================================
        //                                                                           Constructor
        //                                                                           ===========
        #region Constructor
        /**
         * Constructor.
         */
        public ${myClassName}() {
        }
        #endregion

        // =====================================================================================
        //                                                                       Self Dispatcher
        //                                                                       ===============
        #region Self Dispatcher
        /// <summary>
        /// Behavior's self dispatcher as writable
        /// </summary>
        /// <returns>${glBehaviorWritableInterfaceName}</returns>
        abstract protected ${glBehaviorWritableInterfaceName} SelfWritable { get; }
        #endregion

        // =====================================================================================
        //                                                                            Dao Getter
        //                                                                            ==========
        #region Dao Getter
        /**
         * ${database.ImplementComment}
         * 
         * @return Dao-writable. (NotNull)
         */
        abstract public ${glDaoWritableInterfaceName} GetDaoWritable();
        #endregion

        // =====================================================================================
        //                                                                       Delegate Method
        //                                                                       ===============
        #region Delegate-Method
        /**
         * ${database.ImplementComment}
         * 
         * @param entity Entity that the type is entity-interface. (NotNull)
         * @return Inserted count.
         */
        int ${glBehaviorWritableInterfaceName}.DelegateCreateTx(${glEntityInterfaceName} entity) {
            AssertEntityNotNull(entity);
            FilterEntityOfInsert(entity);
            AssertEntityOfInsert(entity);
            return DoDelegateCreate(entity);
        }

        /// <summary>
        /// Filter the entity of insert.
        /// </summary>
        /// <param name="entity">Entity. (NotNull)</param>
        protected virtual void FilterEntityOfInsert(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
        }

        /// <summary>
        /// Assert the entity of insert.
        /// </summary>
        /// <param name="entity">Entity. (NotNull)</param>
        protected virtual void AssertEntityOfInsert(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
        }

        abstract protected int DoDelegateCreate(${glEntityInterfaceName} entity);

        /**
         * ${database.ImplementComment}
         * 
         * @param entity Entity that the type is entity-interface. (NotNull)
         * @return Updated count.
         */
        int ${glBehaviorWritableInterfaceName}.DelegateModifyTx(${glEntityInterfaceName} entity) {
            AssertEntityNotNull(entity);
            FilterEntityOfUpdate(entity);
            AssertEntityOfUpdate(entity);
            return DoDelegateModify(entity);
        }

        /// <summary>
        /// Filter the entity of update.
        /// </summary>
        /// <param name="entity">Entity. (NotNull)</param>
        protected virtual void FilterEntityOfUpdate(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
        }

        /// <summary>
        /// Assert the entity of update.
        /// </summary>
        /// <param name="entity">Entity. (NotNull)</param>
        protected virtual void AssertEntityOfUpdate(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
        }

        abstract protected int DoDelegateModify(${glEntityInterfaceName} entity);

        /**
         * ${database.ImplementComment}
         * 
         * @param entity Entity that the type is entity-interface. (NotNull)
         * @return Deleted count.
         */
        int ${glBehaviorWritableInterfaceName}.DelegateRemoveTx(${glEntityInterfaceName} entity) {
            AssertEntityNotNull(entity);
            FilterEntityOfDelete(entity);
            AssertEntityOfDelete(entity);
            return DoDelegateRemove(entity);
        }

        /// <summary>
        /// Filter the entity of delete.
        /// </summary>
        /// <param name="entity">Entity. (NotNull)</param>
        protected virtual void FilterEntityOfDelete(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
        }

        /// <summary>
        /// Assert the entity of delete.
        /// </summary>
        /// <param name="entity">Entity. (NotNull)</param>
        protected virtual void AssertEntityOfDelete(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
        }

        abstract protected int DoDelegateRemove(${glEntityInterfaceName} entity);

        #endregion

        // =====================================================================================
        //                                                                          Basic Update
        //                                                                          ============
        #region Basic Update

	    /// <summary>
	    /// ${database.ImplementComment}
	    /// </summary>
	    /// <param name="entity">Entity. This must contain primary-key value at least. (NotNull)</param>
	    /// <returns>Updated count.</returns>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
	    public int CreateOrModifyAfterSelectForUpdateTx(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
	        AssertEntityNotNull(entity);
	        String mapString = entity.ExtractPrimaryKeyMapString();
	        ${glPackageBaseCommon}.${glEntityInterfaceName} currentEntity = null;
	        try {
	            currentEntity = ReadForUpdateByPKMapStringWithDeletedCheckTx(mapString);
	        } catch (${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}) {
	            return this.SelfWritable.DelegateCreateTx(entity);
	        }
	        AssertEntityNotNullAndHasPrimaryKeyValue(entity);
	        MergeEntity(entity, currentEntity);
	        return this.SelfWritable.DelegateModifyTx(currentEntity);
	    }

        /**
         * ${database.ImplementComment}
         * 
         * @param entity Entity.
         * @return Updated count.
         * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
         */
        public int ModifyAfterSelectForUpdateTx(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
            AssertEntityNotNullAndHasPrimaryKeyValue(entity);
            ${glConditionBeanInterfaceName} ${glAttachedCBArgsVariableName} = this.DBMeta.NewConditionBean();
            ${glAttachedCBArgsVariableName}.AcceptPrimaryKeyMapString(entity.ExtractPrimaryKeyMapString()).LockForUpdate();
            ${glPackageBaseCommon}.${glEntityInterfaceName} currentEntity = this.SelfReadable.DelegateReadEntityTx(${glAttachedCBArgsVariableName});
            AssertRecordHasNotBeenDeleted(currentEntity, entity.ExtractPrimaryKeyMapString());
            MergeEntity(entity, currentEntity);
            return this.SelfWritable.DelegateModifyTx(currentEntity);
        }

        /**
         * Merge entity.
         * Copy the column data of sourceEntity that the setter has been invoked to destinationEntity.
         * 
         * @param sourceEntity Source entity.
         * @param destinationEntity Destination entity.
         */
        abstract protected void MergeEntity(${glPackageBaseCommon}.${glEntityInterfaceName} sourceEntity, ${glPackageBaseCommon}.${glEntityInterfaceName} destinationEntity);
        #endregion

        // =====================================================================================
        //                                                                        Various Update
        //                                                                        ==============
        #region Various Update
        /// <summary>
        /// Filter logical-delete entity.
        /// </summary>
        /// <param name="entity">Entity. (NotNull)</param>
        protected virtual void FilterLogicalDeleteEntity(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
            // Nothing.
        }

        /// <summary>
        /// Filter revival from logical-delete entity.
        /// </summary>
        /// <param name="entity">Entity. (NotNull)</param>
        protected virtual void FilterRevivalFromLogicalDeleteEntity(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
            // Nothing.
        }
        #endregion

        // =====================================================================================
        //                                                                        Various Insert
        //                                                                        ==============
        #region Various Insert
        /// <summary>
        /// Filter copy-insert entity.
        /// </summary>
        /// <param name="entity">Entity. (NotNull)</param>
        protected virtual void FilterCopyInsertEntity(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
            // Nothing.
        }

       /// <summary>
        /// Reflect(insert or update) from separated-file.
        /// </summary>
        /// <remarks>
        /// If transaction already started, The argument 'batchCount' is invalid. (Inherit the transaction)
        /// </remarks>
        /// <param name="filename">Name of the file. (NotNull and NotEmpty)</param>
        /// <param name="encoding">Encoding of the file. (NotNull and NotEmpty)</param>
        /// <param name="delimiter">Delimiter of the file. (NotNull and NotEmpty)</param>
        /// <param name="batchCount">Batch-count for transaction.</param>
        /// <param name="isErrorContinue">If true, this method continue in spite of throwing the exception.</param>
        /// <returns>The list of InsertOrUpdateExceptionResult. (NotNull)</returns>
        /// <exception cref="FileNotFoundException"></exception>
        /// <exception cref="IOException"></exception>
        public System.Collections.Generic.IList<OneEntityExceptionResult> ReflectFromSeparatedFile(
                String filename, String encoding,
                String delimiter, int batchCount, bool isErrorContinue){
            AssertStringNotNullAndNotTrimmedEmpty("filename", filename);
            AssertStringNotNullAndNotTrimmedEmpty("encoding", encoding);
            AssertObjectNotNull("delimiter", delimiter);
            
            System.Collections.Generic.IList<OneEntityExceptionResult> exceptionList = new System.Collections.Generic.List<OneEntityExceptionResult>();

            try{
                ${glMapStringBuilderName} builder = new ${glMapStringBuilderImplName}();
                builder.MapStringMapMark = MAP_STRING_MAP_MARK;
                builder.MapStringStartBrace = MAP_STRING_START_BRACE;
                builder.MapStringEndBrace = MAP_STRING_END_BRACE;
                builder.MapStringDelimiter = MAP_STRING_DELIMITER;
                builder.MapStringEqual = MAP_STRING_EQUAL;

                System.Collections.Generic.IList<${glEntityInterfaceName}> entityList = new System.Collections.Generic.List<${glEntityInterfaceName}>();
                int count = 0;

                using(System.IO.StreamReader reader = new System.IO.StreamReader(
                    filename, System.Text.Encoding.GetEncoding(encoding))){
                    try{
                        while (true) {
                            ++count;

                            String lineString = reader.ReadLine();
                            if (lineString == null) {
                                if (entityList.Count > 0) {
                                    ReflectAfterSelectForUpdateTx(entityList, isErrorContinue, exceptionList);
                                    entityList.Clear();
                                }
                                break;
                            }
                            if (count == 1) {
                                builder.ColumnNames = lineString.Split(delimiter.ToCharArray());
                                continue;
                            }

                            String mapString = builder.BuildByDelimiter(lineString, delimiter);
                            ${glEntityInterfaceName} entity = DBMeta.NewEntity();
                            entity.AcceptColumnValueMapString(mapString);
                            entityList.Add(entity);

                            if (entityList.Count == batchCount) {
                                ReflectAfterSelectForUpdateTx(entityList, isErrorContinue, exceptionList);
                                entityList.Clear();
                            }
                        }
                    }
                    finally{
                        reader.Close();
                    }
                }
            }
            catch (System.IO.FileNotFoundException) {
                throw;
            } catch (System.IO.IOException) {
                throw;
            }
            
            return exceptionList;
        }

        /// <summary>
        /// Reflect(insert or update) from separated-file.
        /// </summary>
        /// <remarks>
        /// If transaction already started, The argument 'batchCount' is invalid. (Inherit the transaction)
        /// </remarks>
        /// <param name="entityList">The list of entity that is reflection target. (NotNull)</param>
        /// <param name="isErrorContinue">If true, this method continue in spite of throwing the exception.</param>
        /// <returns>The list of InsertOrUpdateExceptionResult. (NotNull)</returns>
        public void ReflectAfterSelectForUpdateTx(System.Collections.Generic.IList<${glEntityInterfaceName}> entityList,
                bool isErrorContinue, System.Collections.Generic.IList<OneEntityExceptionResult> exceptionList) {

            foreach(${glEntityInterfaceName} entity in entityList) {
                try {
                    CreateOrModifyAfterSelectForUpdateTx(entity);
                } catch (System.SystemException e) {
                    if (isErrorContinue) {
                        OneEntityExceptionResult result = new OneEntityExceptionResult();
                        result.PrimaryKeyMapString = entity.ExtractPrimaryKeyMapString();
                        result.Entity = entity;
                        result.Exception = e;
                        exceptionList.Add(result);
                        continue;
                    }
                    throw;
                }
            }
            return;
        }

        #endregion
    }
}
