
#set ($myClassName = "${glOrderByClauseName}")

using System;
using System.Text;

namespace ${glPackageBaseCommonSqlClause} {

    /**
     * The paging-result-bean of ${myClassName}.
     * 
     * @author ${database.ClassAuthor}
     */
    [System.Serializable]
    public class ${myClassName} {

        // =====================================================================================
        //                                                                             Attribute
        //                                                                             =========
        protected System.Collections.Generic.IList<${glOrderByElementName}> _orderByList = new System.Collections.Generic.List<${glOrderByElementName}>();

        // =====================================================================================
        //                                                                           Constructor
        //                                                                           ===========
        /**
         * Constructor.
         */
        public ${myClassName}() {
        }

        // =====================================================================================
        //                                                                              Behavior
        //                                                                              ========
        public void AddOrderByElement(${glOrderByElementName} value) {
            _orderByList.Add(value);
        }

        public void ReverseAll() {
            foreach (${glOrderByElementName} element in _orderByList) {
                element.Reverse();
            }
        }

        /**
         * Get the value of allRecordCount.
         * 
         * @return The value of allRecordCount.
         */
        public System.Collections.Generic.IList<${glOrderByElementName}> GetOrderByList() {
            return _orderByList;
        }

        public String GetOrderByClause() {
            if (_orderByList.Count == 0) {
                return "";
            }
            StringBuilder sb = new StringBuilder();
            String delimiter = ", ";
            foreach (${glOrderByElementName} element in _orderByList) {
                sb.Append(delimiter).Append(element.GetElementClause());
            }
            sb.Remove(0, delimiter.Length).Insert(0, "order by ");
            return sb.ToString();
        }

        public String GetFirstElementColumnFullName() {
            if (IsEmpty()) {
                String msg = "This order-by clause is empty: " + ToString();
                throw new SystemException(msg);
            }
            ${glOrderByElementName} element = (${glOrderByElementName})_orderByList[0];
            return element.GetColumnFullName();
        }

        public String GetFirstElementRegisteredColumnFullName() {
            if (IsEmpty()) {
                String msg = "This order-by clause is empty: " + ToString();
                throw new SystemException(msg);
            }
            ${glOrderByElementName} element = (${glOrderByElementName})_orderByList[0];
            return element.GetRegisteredColumnFullName();
        }

        public bool IsSameOrderByColumn(String columnFullName) {
            String[] columnFullNameArray = columnFullName.Split('/');
            if (_orderByList.Count != columnFullNameArray.Length) {
                return false;
            }
            int count = 0;
            foreach (String columnFullNameElement in columnFullNameArray) {
                ${glOrderByElementName} element = (${glOrderByElementName})_orderByList[count];
                if (!element.GetColumnFullName().ToLower().Equals(columnFullNameElement.ToLower())) {
                    return false;
                }
                count++;
            }
            return true;
        }

        /// <summary>
        /// Is first element asc?
        /// If order-by list is empty, throws exception.
        /// </summary>
        /// <returns>Determination.</returns>
        public bool IsFirstElementAsc() {
            if (IsEmpty()) {
                String msg = "This order-by clause is empty: " + ToString();
                throw new SystemException(msg);
            }
            ${glOrderByElementName} element = (${glOrderByElementName})_orderByList[0];
            return element.IsAsc();
        }

        /// <summary>
        /// Is first element desc?
        /// If order-by list is empty, throws exception.
        /// </summary>
        /// <returns>Determination.</returns>
        public bool IsFirstElementDesc() {
            return !IsFirstElementAsc();
        }

        /// <summary>
        /// Is same as first element alias-name?
        /// If order-by list is empty, throws exception.
        /// </summary>
        /// <returns>Determination.</returns>
        public bool IsSameAsFirstElementAliasName(String expectedAliasName) {
            if (IsEmpty()) {
                String msg = "This order-by clause is empty: " + ToString();
                throw new SystemException(msg);
            }
            ${glOrderByElementName} element = (${glOrderByElementName})_orderByList[0];
            String actualAliasName = element.AliasName;
            if (actualAliasName != null && expectedAliasName != null) {
                return actualAliasName.Equals(expectedAliasName);
            } else {
                return false;
            }
        }

        /// <summary>
        /// Is same as first element column-name?
        /// If order-by list is empty, throws exception.
        /// </summary>
        /// <returns>Determination.</returns>
        public bool IsSameAsFirstElementColumnName(String expectedColumnName) {
            if (IsEmpty()) {
                String msg = "This order-by clause is empty: " + ToString();
                throw new SystemException(msg);
            }
            ${glOrderByElementName} element = (${glOrderByElementName})_orderByList[0];
            String actualColumnName = element.ColumnName;
            if (actualColumnName != null && expectedColumnName != null) {
                return actualColumnName.Equals(expectedColumnName);
            } else {
                return false;
            }
        }

        /// <summary>
        /// Is same as first element registered alias-name?
        /// If order-by list is empty, throws exception.
        /// </summary>
        /// <returns>Determination.</returns>
        public bool IsSameAsFirstElementRegisteredAliasName(String expectedRegisteredAliasName) {
            if (IsEmpty()) {
                String msg = "This order-by clause is empty: " + ToString();
                throw new SystemException(msg);
            }
            ${glOrderByElementName} element = (${glOrderByElementName})_orderByList[0];
            String actualRegisteredAliasName = element.RegisteredAliasName;
            if (actualRegisteredAliasName != null && expectedRegisteredAliasName != null) {
                return actualRegisteredAliasName.Equals(expectedRegisteredAliasName);
            } else {
                return false;
            }
        }

        /// <summary>
        /// Is same as first element registered column-name?
        /// If order-by list is empty, throws exception.
        /// </summary>
        /// <returns>Determination.</returns>
        public bool IsSameAsFirstElementRegisteredColumnName(String expectedRegisteredColumnName) {
            if (IsEmpty()) {
                String msg = "This order-by clause is empty: " + ToString();
                throw new SystemException(msg);
            }
            ${glOrderByElementName} element = (${glOrderByElementName})_orderByList[0];
            String actualRegisteredColumnName = element.RegisteredColumnName;
            if (actualRegisteredColumnName != null && expectedRegisteredColumnName != null) {
                return actualRegisteredColumnName.Equals(expectedRegisteredColumnName);
            } else {
                return false;
            }
        }

        /// <summary>
        /// Is order-by list empty?
        /// </summary>
        /// <returns>Determination.</returns>
        public bool IsEmpty() {
            return _orderByList.Count == 0;
        }

        /// <summary>
        /// Clear order-by list.
        /// </summary>
        public void Clear() {
            _orderByList.Clear();
        }

        // =====================================================================================
        //                                                                 Basic-Override Method
        //                                                                 =====================
        /**
         * This method overrides the method that is declared at super.
         * 
         * @return View-string of all-columns value.
         */
        public override String ToString() {
            return _orderByList.ToString();
        }
    }
}
