
using System;
using System.Collections;
using ${glPackageBaseCommonCKey};
using ${glPackageBaseCommonCValue};

namespace ${glPackageBaseCommonSqlClause} {

    /// <summary>
    /// The interface of SqlClause.
    /// Author: ${database.ClassAuthor}
    /// </summary>
    public interface ${glSqlClauseInterfaceName} {

        // =====================================================================================
        //                                                                                Clause
        //                                                                                ======
        /**
         * Get clause string.
         * <p>
         * <pre>
         * EX.
         * # from [base-table] left outer join [fk-table] [fk-alias] on [join-condition]
         * # where [base-table].[column] = [value] and [fk-alias].[column] is null
         * # order by [base-table].[column] asc, [fk-alias].[column] desc
         * # for update
         * </pre>
         *
         * @return Clause string. (NotNull)
         */
        String GetClause();

        String GetIncludedSelectColumnClause();

        /**
         * Get select-hint. This is an internal method.
         * 
         * @return select-hint. {select [select-hint] * from table...}
         */
        String GetSelectHint();

        /**
         * Get from clause. {from table left outer join foreign-table on ...}
         * 
         * @return From clause. (NotNull)
         */
        String GetFromClause();

        /**
         * ${database.ImplementComment}
         * 
         * @return from-base-table-hint. {select * from table [from-base-table-hint] where ...} (NotNull)
         */
        String GetFromBaseTableHint();

        /**
         * Get from-hint. This is an internal method.
         * 
         * @return from-hint. {select * from table [from-hint] where ...}
         */
        String GetFromHint();

        /**
         * Get where clause. {where [base-table].[column] = [value] and [fk-alias].[column] is null}
         * 
         * @return Where clause. (NotNull)
         */
        String GetWhereClause();

        /**
         * Get order-by clause. {order by [base-table].[column] asc, [fk-alias].[column] desc}
         * 
         * @return Order-by clause. (NotNull)
         */
        String GetOrderByClause();

        /**
         * Get sql-suffix. This is an internal method.
         * 
         * @return sql-suffix. {select * from table where ... order by ... [sql-suffix]}
         */
        String GetSqlSuffix();

        // =====================================================================================
        //                                                                  IncludedSelectColumn
        //                                                                  ====================
        ${glSqlClauseInterfaceName} RegisterIncludedSelectColumn(String aliasName, String realColumnName);

        // =====================================================================================
        //                                                                                 Where
        //                                                                                 =====
        /**
         * Register where clause.
         * 
         * @param columnName Column name([table-name].[column-name]). (NotNull)
         * @param key Condition key. (NotNull)
         * @param value Condition value. (NotNull)
         * @return this. (NotNull)
         */
        ${glSqlClauseInterfaceName} RegisterWhereClause(String columnName, ${glConditionKeyName} key, ${glConditionValueName} value);

        /**
         * Register where clause.
         * 
         * @param clause Where clause. (NotNull)
         * @return this. (NotNull)
         */
        ${glSqlClauseInterfaceName} RegisterWhereClause(String clause);

        // =====================================================================================
        //                                                                               OrderBy
        //                                                                               =======
        /**
         * ${database.ImplementComment}
         * 
         * @return this. (NotNull)
         */
        ${glOrderByClauseName} GetSqlComponentOfOrderByClause();

        /**
         * Clear order-by.
         * 
         * @return this. (NotNull)
         */
        ${glSqlClauseInterfaceName} ClearOrderBy();

	    /**
	     * Ignore order-by.
	     * 
	     * @return this. (NotNull)
	     */
        ${glSqlClauseInterfaceName} IgnoreOrderBy();

	    /**
	     * Make order-by effective.
	     * 
	     * @return this. (NotNull)
	     */
        ${glSqlClauseInterfaceName} MakeOrderByEffective();

        /**
         * Reverse order-by (between 'asc' and 'desc') or override order-by of ${col.UncapitalisedJavaName}.
         * 
         * @return this. (NotNull)
         */
        ${glSqlClauseInterfaceName} ReverseOrderBy_Or_OverrideOrderBy(String columnFullName, bool isAsc);

        /**
         * Reverse order-by (between 'asc' and 'desc') or override order-by of ${col.UncapitalisedJavaName}.
         * 
         * @return this. (NotNull)
         */
        ${glSqlClauseInterfaceName} ReverseOrderBy_Or_OverrideOrderBy(String columnFullName, String registeredColumnFullName, bool isAsc);

        /**
         * Register order-by-asc.
         * 
         * @param columnFullName Column-full-name([table-name].[column-name]). (NotNull)
         * @return this. (NotNull)
         */
        ${glSqlClauseInterfaceName} RegisterOrderBy(String columnFullName, bool isAsc);

        /**
         * Register order-by-asc.
         * 
         * @param columnFullName Column-full-name([table-name].[column-name]). (NotNull)
         * @return this. (NotNull)
         */
        ${glSqlClauseInterfaceName} RegisterOrderBy(String columnFullName, String registeredColumnFullName, bool isAsc);

        /**
         * Register outer join.
         * 
         * @param joinTableName Join table name(outer join [joinTableName]). (NotNull)
         * @param aliasName Alias name of join table. (NotNull and Unique per invoking method.)
         * @param joinOnMap Map that has conditions of 'on' clause. (NotNull)
         * @return this. (NotNull)
         */
        ${glSqlClauseInterfaceName} RegisterOuterJoin(String joinTableName, String aliasName, System.Collections.IDictionary joinOnMap);

        // =====================================================================================
        //                                                                               Advance
        //                                                                               =======
        /**
         * Fetch first.
         * <p>
         * If you invoke this, your SQL returns [fetch-size] records from first.
         * If you invoke this, instance-variable[_fetchPageNumber] is initialized as one.
         * 
         * @param fetchSize Fetch-size. (NotMinus)
         * @return this. (NotNull)
         */
        ${glSqlClauseInterfaceName} FetchFirst(int fetchSize);

        /**
         * Fetch scope.
         * <p>
         * If you invoke this, your SQL returns [fetch-size] records from [fetch-start-index].
         * If you invoke this, instance-variable[_fetchPageNumber] is initialized as one.
         * 
         * @param fetchStartIndex Fetch-start-index. 0 origin. (NotMinus)
         * @param fetchSize Fetch-size. (NotMinus)
         * @return this. (NotNull)
         */
        ${glSqlClauseInterfaceName} FetchScope(int fetchStartIndex, int fetchSize);

        /**
         * Fetch page.
         * <p>
         * When you invoke this, it is normally necessary to invoke 'fetchFirst()' or 'fetchScope()' ahead of that.
         * But you also can use default-fetch-size without invoking 'fetchFirst()' or 'fetchScope()'.
         * If you invoke this, your SQL returns [fetch-size] records from [fetch-start-index] calculated by [fetch-page-number].
         * 
         * @param fetchPageNumber Fetch-page-number. 1 origin. (NotMinus & NotZero)
         * @return this. (NotNull)
         */
        ${glSqlClauseInterfaceName} FetchPage(int fetchPageNumber);

        /**
         * Get fetch start index.
         * 
         * @return Fetch start index.
         */
        int FetchStartIndex { get; }

        /**
         * Get fetch size.
         * 
         * @return Fetch size.
         */
        int FetchSize { get; }

        /**
         * Get fetch page number.
         * 
         * @return Fetch page number.
         */
        int FetchPageNumber { get; }

        /**
         * Ignore fetch-narrowing.
         * 
         * @return this. (NotNull)
         */
        ${glSqlClauseInterfaceName} IgnoreFetchScope();

        /**
         * Make fetch-narrowing effective.
         * 
         * @return this. (NotNull)
         */
        ${glSqlClauseInterfaceName} MakeFetchScopeEffective();

        /**
         * Is fetch start index supported?
         * 
         * @return Determination.
         */
        bool IsFetchStartIndexSupported { get; }

        /**
         * Is fetch size supported?
         * 
         * @return Determination.
         */
        bool IsFetchSizeSupported { get; }

        /**
         * Lock for update.
         * <p>
         * If you invoke this, your SQL lock target records for update.
         * It depends whether this method supports this on the database type.
         * 
         * @return this. (NotNull)
         */
        ${glSqlClauseInterfaceName} LockForUpdate();

        // =====================================================================================
        //                                                                        FetchNarrowing
        //                                                                        ==============
        /**
         * Get fetch-narrowing start-index.
         * 
         * @return Fetch-narrowing start-index.
         */
        int FetchNarrowingSkipStartIndex { get; }

        /**
         * Get fetch-narrowing size.
         * 
         * @return Fetch-narrowing size.
         */
        int FetchNarrowingLoopCount { get; }

        /**
         * Is fetch-narrowing effective?
         * 
         * @return Determiantion.
         */
        bool IsFetchNarrowingEffective { get; }
    }
}
