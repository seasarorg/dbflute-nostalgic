
#set ($myClassName = "${glDBMetaAbstractName}")

using System;
using System.Text;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonCBean};

namespace ${glPackageBaseCommonDBMeta} {

    /// <summary>
    /// The abstract class of dbmeta.
    /// Author : ${database.ClassAuthor}
    /// </summary>
    public abstract class ${myClassName} : ${glDBMetaInterfaceName} {

        // =====================================================================================
        //                                                                            Table Name
        //                                                                            ==========
        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        /// <returns>Table db-name. (NotNull)</returns>
        abstract public String GetTableDbName();

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        /// <returns>Table cap-prop-name. (NotNull)</returns>
        abstract public String GetTableCapPropName();

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary> 
        /// <returns>Table uncap-prop-name. (NotNull)</returns>
        abstract public String GetTableUncapPropName();

        // =====================================================================================
        //                                                                        DB-Name Method
        //                                                                        ==============
        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        /// <param name="dbName">Db-name. (NotNull)</param>
        /// <returns>Determination.</returns>
        public bool IsExistDbName(String dbName) {
            return GetDbNameCapPropNameMap().ContainsKey(dbName);
        }

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        /// <param name="capPropName">Capitalized property-name. (NotNull)</param>
        /// <returns>Determination.</returns>
        public bool IsExistCapPropName(String capPropName) {
            return GetCapPropNameDbNameMap().ContainsKey(capPropName);
        }

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        /// <param name="unCapPropName">Uncapitalized property-name. (NotNull)</param>
        /// <returns>Determination.</returns>
        public bool IsExistUncapPropName(String unCapPropName) {
            return GetUncapPropNameDbNameMap().ContainsKey(unCapPropName);
        }

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        /// <param name="multiName">Multi-name. (NotNull)</param>
        /// <returns>Determination.</returns>
        public bool IsExistMultiName(String multiName) {
            if (IsExistDbName(multiName)) {
                return true;
            }
            if (IsExistCapPropName(multiName)) {
                return true;
            }
            if (IsExistUncapPropName(multiName)) {
                return true;
            }
            return false;
        }

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary> 
        /// <param name="unCapPropName">Uncapitalized property-name. (NotNull)</param>
        /// <returns>{db-name : cap-prop-name} map.</returns>
        public String GetDbNameByUncapPropName(String unCapPropName) {
            AssertStringNotNullAndNotTrimmedEmpty("unCapPropName", unCapPropName);
            String dbName = null;
            try {
                dbName = (String)GetUncapPropNameDbNameMap()[unCapPropName];
            } catch (System.Collections.Generic.KeyNotFoundException e) {
                String msg = "The propertyNameDbNameMap didn't contain the key of '" + unCapPropName + "': ";
                throw new ArgumentOutOfRangeException(msg + Seasar.Framework.Util.ToStringUtil.ToString(GetUncapPropNameDbNameMap()), e);
            }
            return dbName;
        }

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary> 
        /// <param name="dbName">Db-name. (NotNull)</param>
        /// <returns>Uncapitalized property-name. (NotNull)</returns>
        public String GetUncapPropNameByDbName(String dbName) {
            AssertStringNotNullAndNotTrimmedEmpty("dbName", dbName);
            if (dbName == null) {
                String msg = "The argument[dbName] must not be null.";
                throw new ArgumentNullException(msg);
            }
            String unCapPropName = null;
            try {
                unCapPropName = (String)GetDbNameUncapPropNameMap()[dbName];
            } catch (System.Collections.Generic.KeyNotFoundException e) {
                String msg = "The dbNameUncapPropNameMap didn't contain the key of '" + dbName + "': ";
                throw new ArgumentOutOfRangeException(msg + Seasar.Framework.Util.ToStringUtil.ToString(GetDbNameUncapPropNameMap()), e);
            }
            return unCapPropName;
        }

        /// <summary>
        /// ${database.ImplementComment}
        /// </samarry> 
        /// <param name="capPropName">Capitalized property-name. (NotNull)</param>
        /// <returns>Db-name.</returns>
        public String GetDbNameByCapPropName(String capPropName) {
            AssertStringNotNullAndNotTrimmedEmpty("capPropName", capPropName);
            String dbName = null;
            try {
                dbName = (String)GetCapPropNameDbNameMap()[capPropName];
            } catch (System.Collections.Generic.KeyNotFoundException e) {
                String msg = "The capPropNameDbNameMap didn't contain the key of '" + capPropName + "': ";
                throw new ArgumentOutOfRangeException(msg + Seasar.Framework.Util.ToStringUtil.ToString(GetCapPropNameDbNameMap()), e);
            }
            return dbName;
        }

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        /// <param name="dbName">Db-name. (NotNull)</param>
        /// <returns>Capitalized property-name.</returns>
        public String GetCapPropNameByDbName(String dbName) {
            AssertStringNotNullAndNotTrimmedEmpty("dbName", dbName);
            String capPropName = null;
            try {
                capPropName = (String)GetDbNameCapPropNameMap()[dbName];
            } catch (System.Collections.Generic.KeyNotFoundException e) {
                String msg = "The dbNameCapPropNameMap didn't contain the key of '" + dbName + "': ";
                throw new ArgumentOutOfRangeException(msg + Seasar.Framework.Util.ToStringUtil.ToString(GetDbNameCapPropNameMap()), e);
            }
            return capPropName;
        }

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary> 
        /// <param name="unCapProp">Uncap-prop-name. (NotNull)</param>
        /// <returns>Capitalized property-name. (NotNull)</returns>
        public String GetCapPropNameByUncapPropName(String unCapProp) {
            AssertStringNotNullAndNotTrimmedEmpty("unCapProp", unCapProp);
            String capPropName = null;
            try {
                capPropName = (String)GetUncapPropNameCapPropNameMap()[unCapProp];
            } catch (System.Collections.Generic.KeyNotFoundException e) {
                String msg = "The uncapPropNameCapPropNameMap didn't contain the key of '" + unCapProp + "': ";
                throw new ArgumentOutOfRangeException(msg + Seasar.Framework.Util.ToStringUtil.ToString(GetUncapPropNameCapPropNameMap()), e);
            }
            return capPropName;
        }

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary> 
        /// <param name="capProp">Cap-prop-name. (NotNull)</param>
        /// <returns>Uncapitalized property-name. (NotNull)</returns>
        public String GetUncapPropNameByCapPropName(String capProp) {
            AssertStringNotNullAndNotTrimmedEmpty("capProp", capProp);
            String uncapPropName = null;
            try {
                uncapPropName = (String)GetCapPropNameUncapPropNameMap()[capProp];
            } catch (System.Collections.Generic.KeyNotFoundException e) {
                String msg = "The capPropNameCapPropNameMap didn't contain the key of '" + capProp + "': ";
                throw new ArgumentOutOfRangeException(msg + Seasar.Framework.Util.ToStringUtil.ToString(GetCapPropNameUncapPropNameMap()), e);
            }
            return uncapPropName;
        }

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        /// <param name="multiName">Multi-name. (NotNull)</param>
        /// <returns>Db-name.</returns>
        public String GetDbNameByMultiName(String multiName) {
            AssertStringNotNullAndNotTrimmedEmpty("multiName", multiName);
            if (IsExistDbName(multiName)) {
                return multiName;
            }
            if (IsExistCapPropName(multiName)) {
                return GetDbNameByCapPropName(multiName);
            }
            if (IsExistUncapPropName(multiName)) {
                return GetDbNameByUncapPropName(multiName);
            }
            String msg = "The multi-name is invalid: multiName=" + multiName;
            throw new ArgumentOutOfRangeException(msg);
        }

        /// <summary>
        /// Get cap-prop-name by multi-name.
        /// </summary> 
        /// <param name="multiName">Multi-name. (NotNull)</param>
        /// <returns>Cap-prop-name. (NotNull)</returns>
        public String GetCapPropNameByMultiName(String multiName) {
            AssertStringNotNullAndNotTrimmedEmpty("multiName", multiName);
            if (IsExistDbName(multiName)) {
                return GetCapPropNameByDbName(multiName);
            }
            if (IsExistCapPropName(multiName)) {
                return multiName;
            }
            if (IsExistUncapPropName(multiName)) {
                return GetCapPropNameByUncapPropName(multiName);
            }
            String msg = "The multi-name is invalid: multiName=" + multiName;
            throw new ArgumentOutOfRangeException(msg);
        }

        /// <summary>
        /// Get uncap-prop-name by multi-name.
        /// </summary> 
        /// <param name="multiName">Multi-name. (NotNull)</param>
        /// <returns>Uncap-prop-name. (NotNull)</returns>
        public String GetUncapPropNameByMultiName(String multiName) {
            AssertStringNotNullAndNotTrimmedEmpty("multiName", multiName);
            if (IsExistDbName(multiName)) {
                return GetUncapPropNameByDbName(multiName);
            }
            if (IsExistCapPropName(multiName)) {
                return GetUncapPropNameByCapPropName(multiName);
            }
            if (IsExistUncapPropName(multiName)) {
                return multiName;
            }
            String msg = "The multi-name is invalid: multiName=" + multiName;
            throw new ArgumentOutOfRangeException(msg);
        }

        // =====================================================================================
        //                                                                    DB-Name-Map Getter
        //                                                                    ==================
        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        /// <returns>{uncap-prop-name : db-name} map.</returns>
        abstract public System.Collections.Generic.IDictionary<String, String> GetUncapPropNameDbNameMap();

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary> 
        /// <returns>{db-name : uncap-prop-name} map.</returns>
        abstract public System.Collections.Generic.IDictionary<String, String> GetDbNameUncapPropNameMap();

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary> 
        /// <returns>{cap-prop-name : db-name} map.</returns>
        abstract public System.Collections.Generic.IDictionary<String, String> GetCapPropNameDbNameMap();

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary> 
        /// <returns>{db-name : cap-prop-name} map.</returns>
        abstract public System.Collections.Generic.IDictionary<String, String> GetDbNameCapPropNameMap();

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        /// <returns>{cap-prop-name : uncap-prop-name} map.</returns>
        abstract public System.Collections.Generic.IDictionary<String, String> GetCapPropNameUncapPropNameMap();

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        /// <returns>{uncap-prop-name : cap-prop-name} map.</returns>
        abstract public System.Collections.Generic.IDictionary<String, String> GetUncapPropNameCapPropNameMap();

        // =====================================================================================
        //                                                                           Type Getter
        //                                                                           ===========
        /**
         * Get the type of dao.
         * 
         * @return The type of dao. (NotNull)
         */
        abstract public Type GetDaoType();

        /**
         * Get the type of entity.
         * 
         * @return The type of entity. (NotNull)
         */
        abstract public Type GetEntityType();

        /**
         * Get the type of condition-bean.
         * 
         * @return The type of condition-bean. (NotNull)
         */
        abstract public Type GetConditionBeanType();

        // =====================================================================================
        //                                                                       Instance Getter
        //                                                                       ===============
        /**
         * New the instance of entity.
         * 
         * @return The instance of entity. (NotNull)
         */
        abstract public ${glEntityInterfaceName} NewEntity();

        /**
         * New the instance of condition-bean.
         * 
         * @return The instance of condition-bean. (NotNull)
         */
        abstract public ${glConditionBeanInterfaceName} NewConditionBean();

        // =====================================================================================
        //                                                                   Entity PropertyInfo
        //                                                                   ===================
        #region Entity PropertyInfo
        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        /// <param name="multiName">Multi-name. (NotNull)</param>
        /// <returns>Entity property-info. (NotNull)</returns>
        abstract public System.Reflection.PropertyInfo GetEntityPropertyInfoByMultiName(String multiName);
        #endregion

        // =====================================================================================
        //                                                                        Foreign DBMeta
        //                                                                        ==============
        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        /// <param name="foreignPropertyName">Foreign-property-name(Both OK - InitCap or not). (NotNull)</param>
        /// <returns>Foreign DBMeta. (NotNull)</returns>
        abstract public DBMeta GetForeignDBMeta(String foreignPropertyName);

        // =====================================================================================
        //                                                                         Determination
        //                                                                         =============
        /**
         * ${database.ImplementComment}
         * 
         * @return Determination.
         */
        abstract public bool HasTwoOrMorePrimaryKeys { get; }

        /**
         * ${database.ImplementComment}
         * 
         * @return Determination.
         */
        abstract public bool HasCommonColumn { get; }

        // ----------------------------------------------------------------
        //                                                    Assert Object
        //                                                    -------------
        #region Assert Object

        /**
         * Assert that the argument is not null.
         * 
         * @param variableName Variable name. (NotNull)
         * @param arg Argument. (NotNull)
         */
        protected void AssertObjectNotNull(String variableName, Object arg) {
            if (variableName == null) {
                String msg = "Argument[variableName] should not be null.";
                throw new ArgumentNullException(msg);
            }
            if (arg == null) {
                String msg = "Argument[" + variableName + "] should not be null.";
                throw new ArgumentNullException(msg);
            }
        }

        #endregion

        // ----------------------------------------------------------------
        //                                                    Assert String
        //                                                    -------------
        #region Assert Argument

        /**
         * Assert that the string is not null and not trimmed empty.
         * 
         * @param variableName Variable name. (NotNull)
         * @param arg Argument. (NotNull)
         */
        protected void AssertStringNotNullAndNotTrimmedEmpty(String variableName, String value) {
            if (variableName == null) {
                String msg = "Variable[variableName] should not be null.";
                throw new ArgumentNullException(msg);
            }
            if (value == null) {
                String msg = "Variable[" + variableName + "] should not be null.";
                throw new ArgumentNullException(msg);
            }
            if (value.Trim().Length == 0) {
                String msg = "Variable[" + variableName + "] should not be empty: [" + value + "]";
                throw new ArgumentOutOfRangeException(msg);
            }
        }

        #endregion
    }
}
