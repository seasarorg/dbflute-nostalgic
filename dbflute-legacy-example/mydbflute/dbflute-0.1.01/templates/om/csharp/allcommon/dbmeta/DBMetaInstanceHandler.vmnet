
#set ($myClassName = "${glDBMetaInstanceHandlerName}")
#set ($instanceMapGenericDefinition = "String, ${glDBMetaInterfaceName}")

using System;
using System.Collections.Generic;

namespace ${glPackageBaseCommonDBMeta} {

    /// <sumarry>
    /// DBMeta instance handler.
    /// Author : ${database.ClassAuthor}
    public class ${myClassName} {

        /// <sumarry>Table db-name instance map.</sumarry>
        protected static readonly IDictionary<String, ${glDBMetaInterfaceName}> _tableDbNameInstanceMap;

        /// <sumarry>Table cap-prop-name instance map.</sumarry>
        protected static readonly IDictionary<String, ${glDBMetaInterfaceName}> _tableCapPropNameInstanceMap;

        /// <sumarry>Table uncap-prop-name instance map.</sumarry>
        protected static readonly IDictionary<String, ${glDBMetaInterfaceName}> _tableUncapPropNameInstanceMap;

        static ${myClassName}() {
            {
                IDictionary<String, ${glDBMetaInterfaceName}> tmpMap = new Dictionary<String, ${glDBMetaInterfaceName}>();

    #foreach ($table in $database.Tables)

                tmpMap.Add("${table.Name}", GetDBMeta("${glPackageBaseDBMeta}.${glProjectPrefix}${table.JavaName}Dbm"));
    #end

                _tableDbNameInstanceMap = tmpMap;//java.util.Collections.unmodifiableMap(tmpMap);
            }

            {
                IDictionary<String, ${glDBMetaInterfaceName}> tmpMap = new Dictionary<String, ${glDBMetaInterfaceName}>();

    #foreach ($table in $database.Tables)

                tmpMap.Add("${table.JavaName}", GetDBMeta("${glPackageBaseDBMeta}.${glProjectPrefix}${table.JavaName}Dbm"));
    #end

                _tableCapPropNameInstanceMap = tmpMap;//java.util.Collections.unmodifiableMap(tmpMap);
            }

            {
                IDictionary<String, ${glDBMetaInterfaceName}> tmpMap = new Dictionary<String, ${glDBMetaInterfaceName}>();

    #foreach ($table in $database.Tables)

                tmpMap.Add("${table.UncapitalisedJavaName}", GetDBMeta("${glPackageBaseDBMeta}.${glProjectPrefix}${table.JavaName}Dbm"));
    #end

                _tableUncapPropNameInstanceMap = tmpMap;//java.util.Collections.unmodifiableMap(tmpMap);
            }
        }

        protected static ${glDBMetaInterfaceName} GetDBMeta(String className) {
            Seasar.Framework.Xml.S2Section config = Seasar.Framework.Xml.S2SectionHandler.GetS2Section();
            Type clazz = ForName(className, config.Assemblys);
            if (clazz == null) {
                String msg = "The className was not found: " + className + " assemblys=";
                msg = msg + Seasar.Framework.Util.ToStringUtil.ToString(config.Assemblys);
                throw new SystemException(msg);
            }
            System.Reflection.MethodInfo method = clazz.GetMethod("GetInstance");
            return (${glDBMetaInterfaceName})method.Invoke(null, null);
        }

        protected static Type ForName(string className, System.Collections.IList assemblys) {
            Type type = Type.GetType(className);
            if(type != null) return type;
            foreach(String assemblyName in assemblys) {
                System.Reflection.Assembly assembly = System.Reflection.Assembly.Load(assemblyName);
                if (assembly == null) {
                    String msg = "The assemblyName was not found: " + assemblyName + " assemblys=";
                    msg = msg + Seasar.Framework.Util.ToStringUtil.ToString(assemblys);
                    throw new SystemException(msg);
                }
                type = assembly.GetType(className);
                if(type != null) return type;
            }
            return type;
        }

        /// <sumarry>
        /// Get instance by table db-name.
        /// </sumarry> 
        /// <param name="tableDbName">Table db-name. (NotNull)</param>
        /// <returns>Instance. (NotNull)</returns>
        public static ${glDBMetaInterfaceName} GetInstanceByTableDbName(String tableDbName) {
            AssertObjectNotNull("tableDbName", tableDbName);
            try {
                return (${glDBMetaInterfaceName})_tableDbNameInstanceMap[tableDbName];
            } catch (System.Collections.Generic.KeyNotFoundException e) {
                String msg = "The tableDbNameInstanceMap didn't contain the key of '" + tableDbName + "': ";
                throw new ArgumentOutOfRangeException(msg + _tableDbNameInstanceMap, e);
            }
        }

        /// <sumarry>
        /// Get instance by table cap-prop-name.
        /// </sumarry> 
        /// <param name="tableCapPropName">Table cap-prop-name. (NotNull)</param>
        /// <returns>Instance. (NotNull)</returns>
        public static ${glDBMetaInterfaceName} GetInstanceByTableCapPropName(String tableCapPropName) {
            AssertObjectNotNull("tableCapPropName", tableCapPropName);
            try {
                return (${glDBMetaInterfaceName})_tableCapPropNameInstanceMap[tableCapPropName];
            } catch (System.Collections.Generic.KeyNotFoundException e) {
                String msg = "The tableCapPropNameInstanceMap didn't contain the key of '" + tableCapPropName + "': ";
                throw new ArgumentOutOfRangeException(msg + _tableCapPropNameInstanceMap, e);
            }
        }

        /// <sumarry>
        /// Get instance by table uncap-prop-name.
        /// </sumarry> 
        /// <param name="tableUncapPropName">Table uncap-prop-name. (NotNull)</param>
        /// <returns>Instance. (NotNull)</returns>
        public static ${glDBMetaInterfaceName} GetInstanceByTableUncapPropName(String tableUncapPropName) {
            AssertObjectNotNull("tableUncapPropName", tableUncapPropName);
            try {
                return (${glDBMetaInterfaceName})_tableUncapPropNameInstanceMap[tableUncapPropName];
            } catch (System.Collections.Generic.KeyNotFoundException e) {
                String msg = "The tableUncapPropNameInstanceMap didn't contain the key of '" + tableUncapPropName + "': ";
                throw new ArgumentOutOfRangeException(msg + _tableUncapPropNameInstanceMap, e);
            }
        }

        /// <sumarry>
        /// Get instance by table multi-name.
        /// </sumarry> 
        /// <param name="tableMultiName">Table multi-name. (NotNull)</param>
        /// <returns>Instance. (NotNull)</returns>
        public static ${glDBMetaInterfaceName} GetInstanceByTableMultiName(String tableMultiName) {
            AssertObjectNotNull("tableMultiName", tableMultiName);
            
            try {
                return (${glDBMetaInterfaceName})_tableDbNameInstanceMap[tableMultiName];
            } catch (System.Collections.Generic.KeyNotFoundException) {
            }
            try {
                return (${glDBMetaInterfaceName})_tableCapPropNameInstanceMap[tableMultiName];
            } catch (System.Collections.Generic.KeyNotFoundException) {
            }
            try {
                return (${glDBMetaInterfaceName})_tableUncapPropNameInstanceMap[tableMultiName];
            } catch (System.Collections.Generic.KeyNotFoundException) {
            }

            String msg = "The tableMultiName does not exist in all-instance-map: tableMultiName=" + tableMultiName;
            msg = msg + " tableDbNameInstanceMap=" + Seasar.Framework.Util.ToStringUtil.ToString(_tableDbNameInstanceMap);
            msg = msg + " tableCapPropNameInstanceMap=" + Seasar.Framework.Util.ToStringUtil.ToString(_tableCapPropNameInstanceMap);
            msg = msg + " tableUncapPropNameInstanceMap=" + Seasar.Framework.Util.ToStringUtil.ToString(_tableUncapPropNameInstanceMap);
            throw new ArgumentOutOfRangeException(msg);
        }

        // ----------------------------------------------------------------
        //                                                  Assert Argument
        //                                                  ---------------
        /// <sumarry>
        /// Assert that the object is not null.
        /// </sumarry> 
        /// <param name="variableName">Variable name. (NotNull)</param>
        /// <param name="arg">Argument. (NotNull)</param>
        protected static void AssertObjectNotNull(String variableName, Object arg) {
            if (variableName == null) {
                String msg = "Argument[variableName] must not be null.";
                throw new ArgumentNullException(msg);
            }
            if (arg == null) {
                String msg = "Argument[" + variableName + "] must not be null.";
                throw new ArgumentNullException(msg);
            }
        }
    }
}
