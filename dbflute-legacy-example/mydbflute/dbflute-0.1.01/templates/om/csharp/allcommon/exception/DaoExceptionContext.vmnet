
using System;
using System.Collections.Generic;
using System.Threading;

namespace ${glPackageBaseCommonException} {

/**
 * Dao-exception context. (referring to s2pager)
 * 
 * @author ${database.ClassAuthor}
 */
    public static class ${glDaoExceptionContextName} {

        /** The thread-local for this. */
        private static LocalDataStoreSlot _slot = Thread.AllocateDataSlot();

        /** Key of sql. */
        public static readonly String KEY_SQL = "sql";

        /** Key of exception. */
        public static readonly String KEY_EXCEPTION = "exception";

        /**
         * Get condition-bean context on thread.
         * 
         * @return Condition-bean. (Nullable)
         */
        public static IDictionary<String, Object> GetInformationMapOnThread() {
            return (IDictionary<String, Object>)Thread.GetData(_slot);
        }

        /**
         * Get sql on thread.
         * 
         * @return SQL. (NotNull)
         */
        public static String GetSqlOnThread() {
            if (GetInformationMapOnThread() == null) {
                return null;
            }
            return (String)GetInformationMapOnThread()[KEY_SQL];
        }

        /**
         * Set sql on thread.
         * 
         * @param sql SQL. (NotNull)
         */
        public static void SetSqlOnThread(String sql) {
            if (sql == null) {
                String msg = "The argument[sql] must not be null.";
                throw new ArgumentNullException(msg);
            }
            if (GetInformationMapOnThread() == null) {
                IDictionary<String, Object> contextMap = new Dictionary<String, Object>();
                Thread.SetData(_slot, contextMap);
            }
            GetInformationMapOnThread().Add(KEY_SQL, sql);
        }

        /**
         * Get exception on thread.
         * 
         * @return Exception. (NotNull)
         */
        public static Exception GetExceptionOnThread() {
            if (GetInformationMapOnThread() == null) {
                return null;
            }
            return (Exception)GetInformationMapOnThread()[KEY_EXCEPTION];
        }

        /**
         * Set exception on thread.
         * 
         * @param exception Exception. (NotNull)
         */
        public static void SetExceptionOnThread(Exception exception) {
            if (exception == null) {
                String msg = "The argument[exception] must not be null.";
                throw new ArgumentNullException(msg);
            }
            if (GetInformationMapOnThread() == null) {
                IDictionary<String, Object> contextMap = new Dictionary<String, Object>();
                Thread.SetData(_slot, contextMap);
            }
            GetInformationMapOnThread().Add(KEY_EXCEPTION, exception);
        }

        /**
         * Clear dao-exception context on thread.
         */
        public static void ClearDaoExceptionOnThread() {
            Thread.SetData(_slot, null);
        }

        /**
         * Is existing dao-exception context on thread?
         * 
         * @return Determination.
         */
        public static bool IsExistDaoExceptionOnThread() {
            return (Thread.GetData(_slot) != null);
        }
    }
}
