
using System;
using System.Reflection;
using System.Collections;
using System.Text;

using ${glPackageBaseCommon};

namespace ${glPackageBaseCommonInterceptor} {

    /// <sumarry>
    /// CommonColumn-Setup Abstract Interceptor.
    /// Author : ${database.ClassAuthor}
    /// </sumarry> 
    public abstract class ${glCommonColumnSetupAbstractInterceptor} : Seasar.Framework.Aop.Interceptors.AbstractInterceptor {

        /// <sumarry>Log-instance.</sumarry>
        private static readonly log4net.ILog _log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

        /// <sumarry>
        /// Invoke.
        /// </sumarry> 
        /// <param name="invocation"> Method invocation.</param>
        /// <returns>Result of the method.</returns>
        /// <exception cref="Throwable"></exception>
        public override object Invoke(Seasar.Framework.Aop.IMethodInvocation invocation) {
            MethodBase method = invocation.Method;
            Object[] args = invocation.Arguments;

            if (!(args != null && args.Length != 0)) {
                return invocation.Proceed();
            }
            Object firstArgument = args[0];
            if (IsEntityDefinedCommonColumn(firstArgument)) {
                ${glEntityDefinedCommonColumnInterfaceName} entity = (${glEntityDefinedCommonColumnInterfaceName})firstArgument;
                if (_log.IsDebugEnabled) {
                    String methodName = method.DeclaringType.Name + "." + method.Name;
                    _log.Debug("Intercepted the method '" + methodName + "()': entity=" + entity.ExtractPrimaryKeyMapString());
                }
                SetupEntity(entity);
                return invocation.Proceed();
            } else if (IsListSaveEntityDefinedCommonColumn(firstArgument)) {
                IList ls = (IList)firstArgument;
                if (_log.IsDebugEnabled) {
                    String methodName = method.DeclaringType.Name + "." + method.Name;
                    _log.Debug("Intercepted the method '" + methodName + "()': entityList.Count=" + ls.Count);
                }
                foreach (${glEntityDefinedCommonColumnInterfaceName} entity in ls) {
                    SetupEntity(entity);
                }
                return invocation.Proceed();
            } else {
                return invocation.Proceed();
            }
        }

        /// <sumarry>
        /// Is the object entity defined common column?
        /// </sumarry>
        /// <param name="obj">Object. If the object is null, returns false. (Nullable)</param>
        /// <returns>Determination.</returns>
        protected bool IsEntityDefinedCommonColumn(Object obj) {
            if (obj == null) {
                return false;
            }
            if (obj is ${glEntityDefinedCommonColumnInterfaceName}) {
                return true;
            } else {
                return false;
            }
        }

        /// <sumarry>
        /// Is the object list that saves entity defined common column?
        /// </sumarry> 
        /// <param name="obj">Object. If the object is null, returns false. (Nullable)</param>
        /// <returns>Determination.</returns>
        protected bool IsListSaveEntityDefinedCommonColumn(Object obj) {
            if (obj == null) {
                return false;
            }
            if (!(obj is IList)) {
                return false;
            }
            IList ls = (IList)obj;
            foreach (Object currentObj in ls) {
                if (!(currentObj is ${glEntityDefinedCommonColumnInterfaceName})) {
                    return false;
                }
            }
            return true;
        }

        /// <sumarry>
        /// Set up the entity.
        /// </sumarry>
        /// <param name="entity">Entity. (Nullable).</param>
        abstract protected void SetupEntity(${glEntityDefinedCommonColumnInterfaceName} entity);
    }
}