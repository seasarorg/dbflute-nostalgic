
using System;
using System.Reflection;
using System.Text;

using ${glPackageBaseCommonCBean};

namespace ${glPackageBaseCommonS2Dao} {

    /**
     * Fetch page result set factory.
     * 
     * @author ${database.ClassAuthor}
     */
    public class ${glFetchNarrowingResultSetFactory} : Seasar.Extension.ADO.IDataReaderFactory {

        /// <summary>Log instance.</summary>
        private static readonly log4net.ILog _log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

        /// <summary>Is internal-debug enabled?</summary>
        private bool _isInternalDebugEnabled = false;

        /**
         * Constructor.
         */
        public ${glFetchNarrowingResultSetFactory}() {
        }

        /**
         * Create result set.
         * 
         * @param ps Prepared statement.
         * @return Result set. (NotNull)
         */
        public System.Data.IDataReader CreateDataReader(Seasar.Extension.ADO.IDataSource dataSource, System.Data.IDbCommand cmd) {
            if (_isInternalDebugEnabled) {
                if (_log.IsDebugEnabled) {
                    _log.Debug("ExecuteReader(dataSource, cmd). dataSource=" + dataSource + " cmd=" + cmd);
                }
            }

            DateTime before = DateTime.Now;
            System.Data.IDataReader dataReader = Seasar.Framework.Util.CommandUtil.ExecuteReader(dataSource, cmd);
            DateTime after = DateTime.Now;
            if (_log.IsDebugEnabled) {
                _log.Debug("SQL Finished! (" + GetPerformanceView(before, after) + ")");
            }

            if (!${glFetchNarrowingBeanContextName}.IsExistFetchNarrowingBeanOnThread()) {
                return dataReader;// If the first argument is not condition-bean...
            }
            ${glFetchNarrowingBeanInterfaceName} ${glAttachedCBArgsVariableName} = ${glFetchNarrowingBeanContextName}.GetFetchNarrowingBeanOnThread();

            if (!${glAttachedCBArgsVariableName}.IsFetchNarrowingEffective) {
                return dataReader;// It is not necessary to control.
            }
            if (!${glAttachedCBArgsVariableName}.IsFetchNarrowingSkipStartIndexEffective && !${glAttachedCBArgsVariableName}.IsFetchNarrowingLoopCountEffective) {
                return dataReader;// It is not necessary to control. The sql already have been controlled.
            }

            if (_isInternalDebugEnabled) {
                if (_log.IsDebugEnabled) {
                    _log.Debug("Necessary to control fetch-narrowing! ${glAttachedCBArgsVariableName}=" + ${glAttachedCBArgsVariableName});
                }
            }
            return new ${glFetchNarrowingResultSetWrapper}(dataReader, ${glAttachedCBArgsVariableName});
        }

        /**
         * Get performance-view
         * 
         * @param mil Millisecond
         * @return ex)Åo1m23s456msÅp(NotNull)
         */
        protected String GetPerformanceView(DateTime before, DateTime after) {
            long beforeMil = 0;
            {
                String hour = (before.Hour < 10 ? "0" + before.Hour : "" + before.Hour);
                String minute = (before.Minute < 10 ? "0" + before.Minute : "" + before.Minute);
                String secound = (before.Second < 10 ? "0" + before.Second : "" + before.Second);
                String millisecond = (before.Millisecond < 10 ? "00" + before.Millisecond : (before.Millisecond < 100 ? "0" + before.Millisecond : "" + before.Millisecond));
                beforeMil = long.Parse(hour + minute + secound + millisecond);
            }
            long afterMil = 0;
            {
                String hour = (after.Hour < 10 ? "0" + after.Hour : "" + after.Hour);
                String minute = (after.Minute < 10 ? "0" + after.Minute : "" + after.Minute);
                String secound = (after.Second < 10 ? "0" + after.Second : "" + after.Second);
                String millisecond = (after.Millisecond < 10 ? "00" + after.Millisecond : (after.Millisecond < 100 ? "0" + after.Millisecond : "" + after.Millisecond));
                afterMil = long.Parse(hour + minute + secound + millisecond);
            }
            long mil = afterMil - beforeMil;
            if (mil < 0) {
                return "minus mil: " + after + "-" + before;
            }

            long sec = mil / 1000;
            long min = sec / 60;
            sec = sec % 60;
            mil = mil % 1000;

            StringBuilder sb = new StringBuilder();
            if (min >= 10) { // Minute
                sb.Append(min).Append("m");
            } else if (min < 10 && min >= 0) {
                sb.Append("0").Append(min).Append("m");
            }
            if (sec >= 10) { // Secound
                sb.Append(sec).Append("s");
            } else if (sec < 10 && sec >= 0) {
                sb.Append("0").Append(sec).Append("s");
            }
            if (mil >= 100) { // Millisecond
                sb.Append(mil).Append("ms");
            } else if (mil < 100 && mil >= 10) {
                sb.Append("0").Append(mil).Append("ms");
            } else if (mil < 10 && mil >= 0) {
                sb.Append("00").Append(mil).Append("ms");
            }

            return sb.ToString();
        }
    }
}
