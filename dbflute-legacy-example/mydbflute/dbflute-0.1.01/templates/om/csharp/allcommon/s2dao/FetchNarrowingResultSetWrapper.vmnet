
using System;
using System.Collections;
using System.Reflection;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonCBean};

namespace ${glPackageBaseCommonS2Dao} {

    /**
     * Fetch pageページャ用のResultSetラッパー。<p>
     * 検索条件オブジェクトのoffset位置から、limitまでの範囲の結果を
     * nextメソッドで返します。<p>
     * limitが-1の場合、全ての結果をnextメソッドで返します。
     * 
     * @author ${database.ClassAuthor}
     */
    public class ${glFetchNarrowingResultSetWrapper} : System.Data.IDataReader {

        /// <summary>Log instance.</summary>
        private static readonly log4net.ILog _log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

        /// <summary>Is internal-debug enabled?</summary>
        private bool _isInternalDebugEnabled = false;

        /** Original data-reader. */
        protected System.Data.IDataReader _dataReader;

        /** FetchNarrowing-bean. */
        protected ${glFetchNarrowingBeanInterfaceName} _${glAttachedCBArgsVariableName};

        /** Fetch counter. */
        protected long _counter;

        /** Is absolute used? */
        protected bool _isAbsoluteUsed = ${database.isAvailableUseAbsoluteWhenResultSetFetchNarrowing()};

        /**
         * Constructor.
         * 
         * @param dataReader Original data-reader. (NotNull)
         * @param ${glAttachedCBArgsVariableName} FetchNarrowing-bean. (NotNull)
         */
        public ${glFetchNarrowingResultSetWrapper}(System.Data.IDataReader dataReader, ${glFetchNarrowingBeanInterfaceName} ${glAttachedCBArgsVariableName}) {
            _dataReader = dataReader;
            _${glAttachedCBArgsVariableName} = ${glAttachedCBArgsVariableName};

            if (_isInternalDebugEnabled) {
                if (_log.IsDebugEnabled) {
                    String msg = "    IsFetchNarrowingSkipStartIndexEffective=" + GetFetchNarrowingBean().IsFetchNarrowingSkipStartIndexEffective;
                    _log.Debug(msg);
                    msg = "    IsFetchNarrowingLoopCountEffective=" + GetFetchNarrowingBean().IsFetchNarrowingLoopCountEffective;
                    _log.Debug(msg);
                    msg = "    GetFetchNarrowingSkipStartIndex()=" + GetFetchNarrowingSkipStartIndex();
                    _log.Debug(msg);
                    msg = "    GetFetchNarrowingLoopCount()=" + GetFetchNarrowingLoopCount();
                    _log.Debug(msg);
                }
            }

            MoveToFetchStartIndex();
        }

        /**
         * Move to fetch-start-index.
         */
        private void MoveToFetchStartIndex() {
            if (!GetFetchNarrowingBean().IsFetchNarrowingSkipStartIndexEffective) {
                return;
            }
            if (IsCursorUsed()) {
//                if (0 == GetFetchNarrowingSkipStartIndex()) {
//                    GetDataReader().beforeFirst();
//                } else {
//                    GetDataReader().absolute(GetFetchNarrowingSkipStartIndex());
//                }
//                _counter = GetDataReader().getRow();
                throw new NotSupportedException("Cursor is unsupported!!!");
            } else {
                while (_counter < GetFetchNarrowingSkipStartIndex() && GetDataReader().Read()) {
                    ++_counter;
                }
            }
            if (_isInternalDebugEnabled) {
                if (_log.IsDebugEnabled) {
                    _log.Debug("    After moving to fetch-start-index, counter=" + _counter);
                }
            }
        }

        /**
         * Read.
         * 
         * @return Does the result set have next record?
         * @throws SQLException
         */
        public bool Read() {
            bool hasNext = GetDataReader().Read();
            if (!GetFetchNarrowingBean().IsFetchNarrowingLoopCountEffective) {
                return hasNext;
            }
            if (hasNext && _counter < GetFetchNarrowingSkipStartIndex() + GetFetchNarrowingLoopCount()) {
                ++_counter;
                return true;
            } else {
                if (_isInternalDebugEnabled) {
                    if (_log.IsDebugEnabled) {
                        String msg = "    Finally the result of Read() is false! Because counter is greater-equal";
                        msg = msg + " than 'fetch-start-index + real-fetch-size'.";
                        msg = msg + " " + _counter + " >= " + GetFetchNarrowingSkipStartIndex() + " + " + GetFetchNarrowingLoopCount();
                        _log.Debug(msg);
                    }
                }
                return false;
            }
        }

        /**
         * Get result set.
         * 
         * @return Result set.
         */
        protected System.Data.IDataReader GetDataReader() {
            return _dataReader;
        }

        /**
         * Get condition-bean.
         * 
         * @return FetchNarrowing-bean.
         */
        protected ${glFetchNarrowingBeanInterfaceName} GetFetchNarrowingBean() {
            return _${glAttachedCBArgsVariableName};
        }

        /**
         * Get fetch-narrowing start-index from condition-bean.
         * 
         * @return Fetch-narrowing start-index.
         */
        protected int GetFetchNarrowingSkipStartIndex() {
            return GetFetchNarrowingBean().FetchNarrowingSkipStartIndex;
        }

        /**
         * Get fetch-narrowing size from condition-bean.
         * 
         * @return Fetch-narrowing size.
         */
        protected int GetFetchNarrowingLoopCount() {
            return _${glAttachedCBArgsVariableName}.FetchNarrowingLoopCount;
        }

        /**
         * Is cursor used?
         * 
         * @return Determination.
         */
        protected bool IsCursorUsed() {
            return _isAbsoluteUsed && IsCursorSupported(GetDataReader());
        }

        /**
         * Is cursor supported?
         * 
         * @param resultSet ResultSet
         * @return Determation.
         */
        public static bool IsCursorSupported(System.Data.IDataReader dataReader) {
            return false;// TODO: Is Cursor Unsupported???
        }

#region IDataReader メンバ

        void System.Data.IDataReader.Close() {
            GetDataReader().Close();
        }

        int System.Data.IDataReader.Depth {
            get { return GetDataReader().Depth; }
        }

        System.Data.DataTable System.Data.IDataReader.GetSchemaTable() {
            return GetDataReader().GetSchemaTable();
        }

        bool System.Data.IDataReader.IsClosed {
            get { return GetDataReader().IsClosed; }
        }

        bool System.Data.IDataReader.NextResult() {
            return GetDataReader().NextResult();
        }

        int System.Data.IDataReader.RecordsAffected {
            get { return GetDataReader().RecordsAffected; }
        }

        #endregion

        #region IDisposable メンバ

        void System.IDisposable.Dispose() {
            GetDataReader().Dispose();
        }

        #endregion

        #region IDataRecord メンバ

        int System.Data.IDataRecord.FieldCount {
            get { return GetDataReader().FieldCount; }
        }

        bool System.Data.IDataRecord.GetBoolean(int i) {
            return GetDataReader().GetBoolean(i);
        }

        byte System.Data.IDataRecord.GetByte(int i) {
            return GetDataReader().GetByte(i);
        }

        long System.Data.IDataRecord.GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length) {
            return GetDataReader().GetBytes(i, fieldOffset, buffer, bufferoffset, length);
        }

        char System.Data.IDataRecord.GetChar(int i) {
            return GetDataReader().GetChar(i);
        }

        long System.Data.IDataRecord.GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length) {
            return GetDataReader().GetChars(i, fieldoffset, buffer, bufferoffset, length);
        }

        System.Data.IDataReader System.Data.IDataRecord.GetData(int i) {
            return GetDataReader().GetData(i);
        }

        string System.Data.IDataRecord.GetDataTypeName(int i) {
            return GetDataReader().GetDataTypeName(i);
        }

        System.DateTime System.Data.IDataRecord.GetDateTime(int i) {
            return GetDataReader().GetDateTime(i);
        }

        decimal System.Data.IDataRecord.GetDecimal(int i) {
            return GetDataReader().GetDecimal(i);
        }

        double System.Data.IDataRecord.GetDouble(int i) {
            return GetDataReader().GetDouble(i);
        }

        System.Type System.Data.IDataRecord.GetFieldType(int i) {
            return GetDataReader().GetFieldType(i);
        }

        float System.Data.IDataRecord.GetFloat(int i) {
            return GetDataReader().GetFloat(i);
        }

        System.Guid System.Data.IDataRecord.GetGuid(int i) {
            return GetDataReader().GetGuid(i);
        }

        short System.Data.IDataRecord.GetInt16(int i) {
            return GetDataReader().GetInt16(i);
        }

        int System.Data.IDataRecord.GetInt32(int i) {
            return GetDataReader().GetInt32(i);
        }

        long System.Data.IDataRecord.GetInt64(int i) {
            return GetDataReader().GetInt64(i);
        }

        string System.Data.IDataRecord.GetName(int i) {
            return GetDataReader().GetName(i);
        }

        int System.Data.IDataRecord.GetOrdinal(string name) {
            return GetDataReader().GetOrdinal(name);
        }

        string System.Data.IDataRecord.GetString(int i) {
            return GetDataReader().GetString(i);
        }

        object System.Data.IDataRecord.GetValue(int i) {
            return GetDataReader().GetValue(i);
        }

        int System.Data.IDataRecord.GetValues(object[] values) {
            return GetDataReader().GetValues(values);
        }

        bool System.Data.IDataRecord.IsDBNull(int i) {
            return GetDataReader().IsDBNull(i);
        }

        object System.Data.IDataRecord.this[string name] {
            get { return GetDataReader()[name]; }
        }

        object System.Data.IDataRecord.this[int i] {
            get { return GetDataReader()[i]; }
        }

        #endregion
    }
}
