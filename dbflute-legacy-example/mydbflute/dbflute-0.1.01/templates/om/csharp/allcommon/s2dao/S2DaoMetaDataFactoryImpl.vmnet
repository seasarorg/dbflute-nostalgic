
using System;
using System.Collections;
using System.Reflection;
using System.Text;

using Seasar.Extension.ADO;
using Seasar.Extension.ADO.Impl;

namespace ${glPackageBaseCommonS2Dao} {

    /**
     * My-DaoMetaDataFactoryImpl.
     * Customises original class 'DaoMetaDataFactoryImpl'.
     * 
     * @author ${database.ClassAuthor}
     */
    public class ${glDaoMetaDataFactoryImpl} : Seasar.Dao.IDaoMetaDataFactory {

        private Hashtable daoMetaDataCache = new Hashtable();
        private IDataSource dataSource;
        private ICommandFactory commandFactory;
        private IDataReaderFactory dataReaderFactory;
        private IDatabaseMetaData dbMetaData;

        public ${glDaoMetaDataFactoryImpl}(IDataSource dataSource,
            ICommandFactory commandFactory, IDataReaderFactory dataReaderFactory) {
            this.dataSource = dataSource;
            this.commandFactory = commandFactory;
            this.dataReaderFactory = dataReaderFactory;
            this.dbMetaData = new DatabaseMetaDataImpl(dataSource);
        }

        /**
         * Get data meta data.
         * 
         * @param daoType Dao class
         * @return Data meta data.
         */
        public Seasar.Dao.IDaoMetaData GetDaoMetaData(Type daoType) {
            lock(this) {
                String key = daoType.Name;
                Seasar.Dao.IDaoMetaData dmd = (Seasar.Dao.IDaoMetaData) daoMetaDataCache[key];
                if (dmd != null) {
                    return dmd;
                }
                
                // /----------------------------------------------- [MyExtention]
                dmd = new ${glDaoMetaDataExtension}(daoType, dataSource, commandFactory, dataReaderFactory, dbMetaData);
                // --------------------/
                
                daoMetaDataCache[key] = dmd;
                return dmd;
            }
        }
    }
}