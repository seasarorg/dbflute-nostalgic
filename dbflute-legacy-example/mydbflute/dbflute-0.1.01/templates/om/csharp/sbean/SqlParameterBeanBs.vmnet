#set ($myClassName = "${myExtendedSqlParameterClassName}")

using System;
using System.Reflection;
using System.Text;

namespace ${glPackageExtendedSqlParameterBean} {

    /// <summary>
    /// The sql-parametaer-bean of ${mySqlParameterBeanName}.
    /// Author: ${database.ClassAuthor}
    /// </summary>
    [System.Serializable]
    public partial class ${myClassName} {

        // =====================================================================================
        //                                                                     Static Definition
        //                                                                     =================
        #region Static Definition
#foreach ($propertyName in $propertyDefinitionMap.keySet())

        /// <summary>The java name of ${propertyName}</summary>
        public static readonly String JAVA_NAME_OF_${database.initCap($propertyName)} = "${database.initCap($propertyName)}";

        /// <summary>The property name of ${propertyName}</summary>
        public static readonly String PROPERTY_NAME_OF_${database.initCap($propertyName)} = "${propertyName}";
#end

        #endregion

        // =====================================================================================
        //                                                                             Attribute
        //                                                                             =========
        #region Attribute

#foreach ($propertyName in $propertyDefinitionMap.keySet())
  #set ($propertyJavaNative = $database.getSqlParameterBeanPropertyType($mySqlParameterBeanName, $propertyName))
  #if ($database.isSqlParameterBeanPropertyDefaultValueEffective($mySqlParameterBeanName, $propertyName))

        /// <summary>The value of ${propertyName}. Default value is ${database.getSqlParameterBeanPropertyDefaultValue($mySqlParameterBeanName, $propertyName)}.</summary>
        protected ${propertyJavaNative} _${propertyName} = ${database.getSqlParameterBeanPropertyDefaultValue($mySqlParameterBeanName, $propertyName)};
  #else

        /// <summary>The value of ${propertyName}.</summary>
        protected ${propertyJavaNative} _${propertyName};
  #end

        /// <summary>Has the setter of ${col.UncapitalisedJavaName} been invoked?</summary>
        protected bool _isSetterInvoked${database.initCap($propertyName)};
#end

        #endregion

        // =====================================================================================
        //                                                                           Constructor
        //                                                                           ===========
        #region Constructor

        /// <summary>
        /// Constructor.
        /// </summary>
        public ${myClassName}() {
        }

        #endregion

        // =====================================================================================
        //                                                                              Property
        //                                                                              ========
        #region Property
#foreach ($propertyName in $propertyDefinitionMap.keySet())
  #set ($propertyJavaNative = $database.getSqlParameterBeanPropertyType($mySqlParameterBeanName, $propertyName))

        /// <summary>
        /// The value of ${propertyName}.
        /// </summary>
        public ${propertyJavaNative} ${database.initCap($propertyName)} {
            get { return _${propertyName}; }
            set { _isSetterInvoked${database.initCap($propertyName)} = true; _${propertyName} = value; }
        }
#end

        #endregion

        // =====================================================================================
        //                                                                Invoking Determination
        //                                                                ======================
#foreach ($propertyName in $propertyDefinitionMap.keySet())
  #set ($propertyJavaNative = $database.getSqlParameterBeanPropertyType($mySqlParameterBeanName, $propertyName))

        /// <summary>
        /// Has the setter of ${propertyName} been invoked?
        /// </summary>
        /// <returns>Determination.</returns>
        public bool IsSetterInvoked${database.initCap($propertyName)}() {
            return _isSetterInvoked${database.initCap($propertyName)};
        }
#end

        // =====================================================================================
        //                                                                 Property PropertyInfo
        //                                                                 =====================
        #region Property PropertyInfo
#foreach ($propertyName in $propertyDefinitionMap.keySet())
  #set ($propertyJavaNative = $database.getSqlParameterBeanPropertyType($mySqlParameterBeanName, $propertyName))

        /// <summary>
        /// Get the propertyInfo of ${propertyName}.
        /// </summary>
        public PropertyInfo GetPropertyInfo${database.initCap($propertyName)}() {
            return this.GetType().GetProperty("${database.initCap($propertyName)}");
        }
#end

        #endregion

        // =====================================================================================
        //                                                                 Basic-Override Method
        //                                                                 =====================
        /// <summary>
        /// ${database.OverrideComment}
        /// </summary>
        /// <returns>View-string of all-columns value.</returns>
        public override String ToString() {
            StringBuilder sb = new StringBuilder();
#foreach ($propertyName in $propertyDefinitionMap.keySet())
  #set ($propertyJavaNative = $database.getSqlParameterBeanPropertyType($mySqlParameterBeanName, $propertyName))

            sb.Append(" ${propertyName}=").Append(this.${database.initCap($propertyName)});
#end

            return sb.ToString();
        }
    }
}
