package ${glPackageBaseCommon};

#set ($myClassName = "${glGenMetaDataClassName}")

import java.util.Map;

import ${glPackageBaseCommonHelper}.${glMapListStringName};
import ${glPackageBaseCommonHelper}.${glMapListStringImplName};

/**
 * The sigleton class that has generate-meta-data(GenMetaData).
 * 
 * @author ${database.ClassAuthor}
 */
public class ${myClassName} {

    /** Singleton instance. */
    private static final ${myClassName} _instance = new ${myClassName}();

    /** The helper of map-list-string. */
    protected ${glMapListStringName} _mapListString = new ${glMapListStringImplName}();

    /**
     * Constructor.
     */
    private ${myClassName}() {
        _mapListString = new ${glMapListStringImplName}();
        _mapListString.setDelimiter(";");
    }

    /**
     * Get instance.
     *
     * @return Singleton instance.
     */
    public static ${myClassName} getInstance() {
        return _instance;
    }

    // =========================================================================================
    //                                                                     Generated method name
    //                                                                     =====================
    /**
     * Get the method name of 'getCountAll'.
     *
     * @return The method name of 'getCountAll'. (NotNull)
     */
    public String getMethodNameOfGetCountAll() {
        return "getCountAll";
    }

    /**
     * Get the method name of 'getListAll'.
     *
     * @return The method name of 'getListAll'. (NotNull)
     */
    public String getMethodNameOfGetListAll() {
        return "getListAll";
    }

    /**
     * Get the method name of 'getEntity'.
     *
     * @return The method name of 'getEntity'. (NotNull)
     */
    public String getMethodNameOfGetEntity() {
        return "getEntity";
    }

    /**
     * Get the method name of 'selectCountIgnoreFetchNarrowing'.
     *
     * @return The method name of 'selectCountIgnoreFetchNarrowing'. (NotNull)
     */
    public String getMethodNameOfSelectCountIgnoreFetchScope() {
        return "selectCountIgnoreFetchScope";
    }

    /**
     * Get the method name of 'selectEntity'.
     *
     * @return The method name of 'selectEntity'. (NotNull)
     */
    public String getMethodNameOfSelectEntity() {
        return "selectEntity";
    }

    /**
     * Get the method name of 'selectList'.
     *
     * @return The method name of 'selectList'. (NotNull)
     */
    public String getMethodNameOfSelectList() {
        return "selectList";
    }

    // =========================================================================================
    //                                             Only when having generated, the effective one
    //                                             =============================================
    /**
     * Get the property-value of targetLanguage.
     *
     * @return The property-value.
     */
    public String getTargetLanguage() {
        return "${database.TargetLanguage}";
    }

    /**
     * Get the property-value of templateFileExtension.
     *
     * @return The property-value.
     */
    public String getTemplateFileExtension() {
        return "${database.TemplateFileExtension}";
    }

    /**
     * Get the property-value of classFileExtension.
     *
     * @return The property-value.
     */
    public String getClassFileExtension() {
        return "${database.ClassFileExtension}";
    }

    /**
     * Get the property-value of templateFileEncoding.
     *
     * @return The property-value.
     */
    public String getTemplateEncoding() {
        return "${database.TemplateFileEncoding}";
    }

    /**
     * Get the property-value of classAuthor.
     *
     * @return The property-value.
     */
    public String getClassAuthor() {
        return "${database.ClassAuthor}";
    }

    /**
     * Is available entity lazy load?
     *
     * @return The property-value.
     */
    public boolean isAvailableEntityLazyLoad() {
        return ${database.isAvailableEntityLazyLoad()};
    }

    /**
     * Is java name of table same as db name? Answer is ${database.isJavaNameOfTableSameAsDbName()}!
     *
     * @return The property-value.
     */
    public boolean isJavaNameOfTableSameAsDbName() {
        return ${database.isJavaNameOfTableSameAsDbName()};
    }

    /**
     * Is java name of column same as db name? Answer is ${database.isJavaNameOfColumnSameAsDbName()}!
     *
     * @return The property-value.
     */
    public boolean isJavaNameOfColumnSameAsDbName() {
        return ${database.isJavaNameOfColumnSameAsDbName()};
    }

    /**
     * is available common-column-setup interceptor to behavior?
     *
     * @return The property-value.
     */
    public boolean isAvailableCommonColumnSetupInterceptorToBehavior() {
        return ${database.isAvailableCommonColumnSetupInterceptorToBehavior()};
    }

    /**
     * Is available generics? Answer is ${database.isAvailableGenerics()}!
     *
     * @return The property-value.
     */
    public boolean isAvailableGenerics() {
        return ${database.isAvailableGenerics()};
    }

    /**
     * Get the property-value of projectPrefix.
     *
     * @return The property-value.
     */
    public String getProjectPrefix() {
        return "${database.ProjectPrefix}";
    }

    /**
     * Get the property-value of basePrefix.
     *
     * @return The property-value.
     */
    public String getBasePrefix() {
        return "${database.BasePrefix}";
    }

    /**
     * Get the property-value of baseSuffixForEntity.
     *
     * @return The property-value.
     */
    public String getBaseSuffixForEntity() {
        return "${database.BaseSuffixForEntity}";
    }

    // -------------------------------------------------------------------------------
    //                                                            DaoDicon Information
    //                                                            --------------------
    /**
     * Get the property-value of daoDiconNamespace.
     *
     * @return The property-value.
     */
    public String getDaoDiconNamespace() {
        return "${database.DaoDiconNamespace}";
    }

    /**
     * Get the property-value of daoDiconPackageName.
     *
     * @return The property-value.
     */
    public String getDaoDiconPackageName() {
        return "${database.DaoDiconPackageName}";
    }

    /**
     * Get the property-value of daoDiconFileName.
     *
     * @return The property-value.
     */
    public String getDaoDiconFileName() {
        return "${database.DaoDiconFileName}";
    }

    /**
     * Get the property-value of j2eeDiconResourceName.
     *
     * @return The property-value.
     */
    public String getJ2eeDiconResourceName() {
        return "${database.J2eeDiconResourceName}";
    }

    /**
     * Get the property-value of requiredTxComponentName.
     *
     * @return The property-value.
     */
    public String getRequiredTxComponentName() {
        return "${database.requiredTxComponentName}";
    }

    // -------------------------------------------------------------------------------
    //                                                               EntityDao Package
    //                                                               -----------------
    /**
     * Get the property-value of baseCommonPackage.
     *
     * @return The property-value.
     */
    public String getBaseCommonPackage() {
        return "${database.BaseCommonPackage}";
    }

    /**
     * Get the property-value of baseBehaviorPackage.
     *
     * @return The property-value.
     */
    public String getBaseBehaviorPackage() {
        return "${database.BaseBehaviorPackage}";
    }

    /**
     * Get the property-value of baseDaoPackage.
     *
     * @return The property-value.
     */
    public String getBaseDaoPackage() {
        return "${database.BaseDaoPackage}";
    }

    /**
     * Get the property-value of baseEntityPackage.
     *
     * @return The property-value.
     */
    public String getBaseEntityPackage() {
        return "${database.BaseEntityPackage}";
    }

    /**
     * Get the property-value of conditionBeanPackage.
     *
     * @return The property-value.
     */
    public String getConditionBeanPackage() {
        return "${database.ConditionBeanPackage}";
    }

    /**
     * Get the property-value of extendedDaoPackage.
     *
     * @return The property-value.
     */
    public String getExtendedDaoPackage() {
        return "${database.ExtendedDaoPackage}";
    }

    /**
     * Get the property-value of extendedBehaviorPackage.
     *
     * @return The property-value.
     */
    public String getExtendedBehaviorPackage() {
        return "${database.ExtendedBehaviorPackage}";
    }

    /**
     * Get the property-value of extendedEntityPackage.
     *
     * @return The property-value.
     */
    public String getExtendedEntityPackage() {
        return "${database.ExtendedEntityPackage}";
    }

    /**
     * Get the property-map of sequenceDefinitionMap.
     *
     * @return The property-map.
     */
    public Map${database.filterGenericsString('String, Object')} getSequenceDefinitionMapAsString() {
        final String property = "${database.SequenceDefinitionMapAsStringRemovedLineSeparator}";
        return _mapListString.generateMap(property);
    }

    /**
     * Get the property-map of IdentityDefinitionMap.
     *
     * @return The property-map.
     */
    public Map${database.filterGenericsString('String, Object')} getIdentityDefinitionMapAsString() {
        final String property = "${database.IdentityDefinitionMapAsStringRemovedLineSeparator}";
        return _mapListString.generateMap(property);
    }

    /**
     * Get the property-value of updateDateFieldName.
     *
     * @return The property-value.
     */
    public String getUpdateDateFieldName() {
        return "${database.UpdateDateFieldName}";
    }

    /**
     * Get the property-value of versionNoFieldName.
     *
     * @return The property-value.
     */
    public String getVersionNoFieldName() {
        return "${database.VersionNoFieldName}";
    }

    /**
     * Get the property-map of commonColumnMapAsStringRemovedLineSeparator.
     *
     * @return The property-map.
     */
    public Map${database.filterGenericsString('String, Object')} getCommonColumnMap() {
        final String property = "${database.CommonColumnMapAsStringRemovedLineSeparator}";
        return _mapListString.generateMap(property);
    }

    /**
     * Get the property-value of fetchPageDefaultFetchSize.
     *
     * @return The property-value.
     */
    public int getSqlClauseDefaultFetchSize() {
        return ${database.FetchPageDefaultFetchSize};
    }

    /**
     * is available use absolute when result set fetch-narrowing?
     *
     * @return The property-value.
     */
    public boolean isAvailableUseAbsoluteWhenResultSetFetchNarrowing() {
        return ${database.isAvailableUseAbsoluteWhenResultSetFetchNarrowing()};
    }

    /**
     * Get the property-value of selectQueryTimeout.
     *
     * @return The property-value.
     */
    public int getSelectQueryTimeout() {
        return ${database.SelectQueryTimeout};
    }

    /**
     * Get the value of 'extractAcceptStartBrace'.
     *
     * @return The property-value. (NotNull)
     */
    public String getExtractAcceptStartBrace() {
        return "${database.extractAcceptStartBrace}";
    }

    /**
     * Get the value of 'extractAcceptEndBrace'.
     *
     * @return The property-value. (NotNull)
     */
    public String getExtractAcceptEndBrace() {
        return "${database.extractAcceptEndBrace}";
    }

    /**
     * Get the value of 'extractAcceptDelimiter'.
     *
     * @return The property-value. (NotNull)
     */
    public String getExtractAcceptDelimiter() {
        return "${database.extractAcceptDelimiter}";
    }

    /**
     * Get the value of 'extractAcceptEqual'.
     *
     * @return The property-value. (NotNull)
     */
    public String getExtractAcceptEqual() {
        return "${database.extractAcceptEqual}";
    }

    /**
     * Get the property-map of jdbcToJavaNativeMap.
     *
     * @return The property-map.
     */
    public Map${database.filterGenericsString('String, Object')} getJdbcToJavaNativeMap() {
        final String property = "${database.JdbcToJavaNativeAsStringRemovedLineSeparator}";
        return _mapListString.generateMap(property);
    }

    /**
     * Get the property-value of wildCard.
     *
     * @return The property-value.
     */
    public String getWildCard() {
        return "${database.WildCard}";
    }
}
