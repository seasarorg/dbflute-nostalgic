package ${glPackageBaseCommonBhv};

import ${glPackageBaseCommon}.${glDaoSelectorInterfaceName};
import ${glPackageBaseCommon}.${glDaoReadableInterfaceName};
import ${glPackageBaseCommon}.${glEntityInterfaceName};
import ${glPackageBaseCommonCBean}.${glConditionBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glListResultBeanName};
import ${glPackageBaseCommonCBean}.${glOrderByBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glPagingBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glPagingResultBeanName};
import ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName};

/**
 * The interface of behavior-readable.
 * 
 * @author ${database.ClassAuthor}
 */
public interface ${glBehaviorReadableInterfaceName} {

    // =====================================================================================
    //                                                                            Definition
    //                                                                            ==========
    /** Map-string map-mark. */
    public static final String MAP_STRING_MAP_MARK = "map:";

    /** Map-string list-mark. */
    public static final String MAP_STRING_LIST_MARK = "list:";

    /** Map-string start-brace. */
    public static final String MAP_STRING_START_BRACE = "${database.extractAcceptStartBrace}";

    /** Map-string end-brace. */
    public static final String MAP_STRING_END_BRACE = "${database.extractAcceptEndBrace}";

    /** Map-string delimiter. */
    public static final String MAP_STRING_DELIMITER = "${database.extractAcceptDelimiter}";

    /** Map-string equal. */
    public static final String MAP_STRING_EQUAL = "${database.extractAcceptEqual}";

    // =====================================================================================
    //                                                                            Table name
    //                                                                            ==========
    /**
     * Get table db-name.
     * 
     * @return Table db-name. (NotNull)
     */
    public String getTableDbName();

    // =====================================================================================
    //                                                                                DBMeta
    //                                                                                ======
    /**
     * Get dbmeta.
     * 
     * @return DBMeta. (NotNull)
     */
    public ${glDBMetaInterfaceName} getDBMeta();

    // =====================================================================================
    //                                                                              Accessor
    //                                                                              ========
    /**
     * Get dao-readable.
     * 
     * @return Dao-readable. (NotNull)
     */
    public ${glDaoReadableInterfaceName} getDaoReadable();

    /**
     * Get dao-selector.
     * 
     * @return Dao-selector.
     */
    public ${glDaoSelectorInterfaceName} getDaoSelector();

    /**
     * Set dao-selector.
     * 
     * @param value Dao-selector.
     */
    public void setDaoSelector(${glDaoSelectorInterfaceName} value);

    // =====================================================================================
    //                                                                       Delegate Method
    //                                                                       ===============
    /**
     * Read count as all. (Delegate-Method)
     * 
     * @return All count. (NotNull)
     */
    public int delegateReadCountAllTx() ;

    /**
     * Read list as all. (Delegate-Method)
     * 
     * @return All list. (NotNull)
     */
    public java.util.List${database.filterGenericsString(${glEntityInterfaceName})} delegateReadListAllTx();

    /**
     * Read count by condition-bean. (Delegate-Method)
     * Ignore fetchFirst() and fetchScope() and fetchPage(). But the fetch status of the condition-bean remains as it is.
     * 
     * @param ${glAttachedCBArgsVariableName} Condition-bean. (NotNull)
     * @return Read count. (NotNull)
     */
    public int delegateReadCountIgnoreFetchScopeTx(${glConditionBeanInterfaceName} ${glAttachedCBArgsVariableName});

    /**
     * Read entity by condition-bean. (Delegate-Method)
     * 
     * @param ${glAttachedCBArgsVariableName} Condition-bean. (NotNull)
     * @return Read entity. If the select result is zero, it returns null. (Nullable)
     */
    public ${glEntityInterfaceName} delegateReadEntityTx(${glConditionBeanInterfaceName} ${glAttachedCBArgsVariableName});

    /**
     * Read list by condition-bean. (Delegate-Method)
     * 
     * @param ${glAttachedCBArgsVariableName} Condition-bean. (NotNull)
     * @return Read list. If the select result is zero, it returns empty list. (NotNull)
     */
    public java.util.List${database.filterGenericsString(${glEntityInterfaceName})} delegateReadListTx(${glConditionBeanInterfaceName} ${glAttachedCBArgsVariableName});

    // =====================================================================================
    //                                                                          Basic Select
    //                                                                          ============
    /**
     * Read list.
     * 
     * @param ${glAttachedCBArgsVariableName} Condition-bean.
     * @return List-result-bean. If the select result is zero, it returns empty list. (NotNull)
     */
    public ${glListResultBeanName} readListTx(${glConditionBeanInterfaceName} ${glAttachedCBArgsVariableName});

    /**
     * Read page.
     * 
     * @param ${glAttachedCBArgsVariableName} Condition-bean. (NotNull)
     * @return Read page. (NotNull)
     */
    public ${glPagingResultBeanName} readPageTx(${glConditionBeanInterfaceName} ${glAttachedCBArgsVariableName});

    /**
     * ${database.ImplementComment}
     * 
     * @param ${glAttachedCBArgsVariableName} Condition-bean. (NotNull)
     * @return Entity that is selected from database. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     */
    public ${glEntityInterfaceName} readEntityWithDeletedCheckTx(${glConditionBeanInterfaceName} ${glAttachedCBArgsVariableName});

    // =====================================================================================
    //                                                                        Various Select
    //                                                                        ==============
    /**
     * Read list after checking count(ignore fetch scope).
     * 
     * @param ${glAttachedCBArgsVariableName} Condition-bean.
     * @param maxCount Max count.
     * @return List-result-bean. If the select result is zero, it returns empty list. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glSelectedCountExceedMaxCountExceptionName}
     */
    public ${glListResultBeanName} readListAfterCheckingCountIgnoreFetchScopeTx(${glConditionBeanInterfaceName} ${glAttachedCBArgsVariableName}, int maxCount);

    /**
     * Read for read only by primary-key map-string with deleted check.
     * 
     * @param primaryKeyMapString Primary-Key map-string. (NotNull)
     * @return Entity that is read from database by select-for-read-only. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     */
    public ${glEntityInterfaceName} readForReadOnlyByPKMapStringWithDeletedCheckTx(String primaryKeyMapString);

    /**
     * Read for update by primary-key map-string with deleted check.
     * 
     * @param primaryKeyMapString Primary-Key map-string. (NotNull)
     * @return Entity that is read from database by select-for-update. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     */
    public ${glEntityInterfaceName} readForUpdateByPKMapStringWithDeletedCheckTx(String primaryKeyMapString);

    /**
     * The interface of select-page callback.
     * 
     * @param <T> The generic template for 'selectedList'.
     */
    public static interface SelectPageCallback${database.filterGenericsString('T')} {
        public ${glPagingBeanInterfaceName} getPagingBean();
        public int selectCountIgnoreFetchScope();
        public java.util.List${database.filterGenericsString('T')} selectList();
    }

    /**
     * The object of result-bean builder.
     * 
     * @param <T> The generic template for 'resultBean'.
     */
    public static class ResultBeanBuilder${database.filterGenericsString('T')} {
        protected ${glBehaviorReadableInterfaceName} _bhv;
        public ResultBeanBuilder(${glBehaviorReadableInterfaceName} bhv) {
            _bhv = bhv;
        }
        /**
         * Build list-reuslt-bean.
         * 
         * @param ob Order-by-bean. (NotNull)
         * @param selectedList Selected list. (NotNull)
         * @return List-result-bean. (NotNull)
         */
        public ${glListResultBeanName}${database.filterGenericsString('T')} buildListResultBean(${glOrderByBeanInterfaceName} ob, java.util.List${database.filterGenericsString('T')} selectedList) {
            ${glListResultBeanName}${database.filterGenericsString('T')} rb = new ${glListResultBeanName}${database.filterGenericsString('T')}();
            rb.setTableDbName(_bhv.getTableDbName());
            rb.setAllRecordCount(selectedList.size());
            rb.setSelectedList(selectedList);
            rb.setOrderByClause(ob.getSqlComponentOfOrderByClause());
            return rb;
        }
        /**
         * Build paging-reuslt-bean.
         * 
         * @param pb Paging-bean. (NotNull)
         * @param allRecordCount All-record-count.
         * @param selectedList Selected list. (NotNull)
         * @return Paging-result-bean. (NotNull)
         */
        public ${glPagingResultBeanName}${database.filterGenericsString('T')} buildPagingResultBean(${glPagingBeanInterfaceName} pb, int allRecordCount, java.util.List${database.filterGenericsString('T')} selectedList) {
            ${glPagingResultBeanName}${database.filterGenericsString('T')} rb = new ${glPagingResultBeanName}${database.filterGenericsString('T')}();
            rb.setTableDbName(_bhv.getTableDbName());
            rb.setAllRecordCount(allRecordCount);
            rb.setSelectedList(selectedList);
            rb.setPageSize(pb.getFetchSize());
            rb.setCurrentPageNumber(pb.getFetchPageNumber());
            rb.setOrderByClause(pb.getSqlComponentOfOrderByClause());
            return rb;
        }
    }

    /**
     * The object of result-bean builder.
     * 
     * @param <T> The generic template for 'resultBean'.
     */
    public static class SelectPageInvoker${database.filterGenericsString('T')} {
        protected ${glBehaviorReadableInterfaceName} _bhv;
        public SelectPageInvoker(${glBehaviorReadableInterfaceName} bhv) {
            _bhv = bhv;
        }
        /**
         * Invoke select-page by callback.
         * 
         * @param callback Callback. (NotNull)
         * @return Paging-result-bean. (NotNull)
         */
        public ${glPagingResultBeanName}${database.filterGenericsString('T')} invokeSelectPage(SelectPageCallback${database.filterGenericsString('T')} callback) {
            assertObjectNotNull("callback", callback);
            final int allRecordCount = callback.selectCountIgnoreFetchScope();
            final java.util.List${database.filterGenericsString('T')} selectedList = callback.selectList();
            final ${glPagingResultBeanName}${database.filterGenericsString('T')} rb = new ResultBeanBuilder${database.filterGenericsString('T')}(_bhv).buildPagingResultBean(callback.getPagingBean(), allRecordCount, selectedList);
            if (isNecessaryToReadPageAgain(rb)) {
                callback.getPagingBean().fetchPage(rb.getAllPageCount());
                int reAllRecordCount = callback.selectCountIgnoreFetchScope();
                java.util.List${database.filterGenericsString('T')} reSelectedList = callback.selectList();
                return new ResultBeanBuilder${database.filterGenericsString('T')}(_bhv).buildPagingResultBean(callback.getPagingBean(), reAllRecordCount, reSelectedList);
            } else {
                return rb;
            }
        }
        /**
         * Is it necessary to read page again?
         * 
         * @param rb Paging-result-bean. (NotNull)
         * @return Determination.
         */
        public boolean isNecessaryToReadPageAgain(${glPagingResultBeanName}${database.filterGenericsString('T')} rb) {
            return rb.getAllRecordCount() > 0 && rb.getSelectedList().isEmpty();
        }
        /**
         * Assert that the object is not null.
         * 
         * @param variableName Variable name. (NotNull)
         * @param value Value. (NotNull)
         * @exception IllegalArgumentException
         */
        protected void assertObjectNotNull(String variableName, Object value) {
            if (variableName == null) {
                String msg = "The value should not be null: variableName=" + variableName + " value=" + value;
                throw new IllegalArgumentException(msg);
            }
            if (value == null) {
                String msg = "The value should not be null: variableName=" + variableName;
                throw new IllegalArgumentException(msg);
            }
        }
    }
}
