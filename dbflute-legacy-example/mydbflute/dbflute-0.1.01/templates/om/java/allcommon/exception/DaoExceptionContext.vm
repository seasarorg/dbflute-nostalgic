package ${glPackageBaseCommonException};

import java.util.Map;
import java.util.LinkedHashMap;

/**
 * Dao-exception context.
 * 
 * @author ${database.ClassAuthor}
 */
public class ${glDaoExceptionContextName} {

    /** The thread-local for this. */
    private static ThreadLocal${database.filterGenericsString('Map<String, Object>')} _threadLocal = new ThreadLocal${database.filterGenericsString('Map<String, Object>')}();

    /** Key of sql. */
    public static final String KEY_SQL = "sql";

    /** Key of exception. */
    public static final String KEY_EXCEPTION = "exception";

    /**
     * Get condition-bean on thread.
     * 
     * @return Condition-bean context. (Nullable)
     */
    public static Map${database.filterGenericsString('String, Object')} getInformationMapOnThread() {
        return (Map${database.filterGenericsString('String, Object')})_threadLocal.get();
    }

    /**
     * Get sql on thread.
     * 
     * @return SQL. (NotNull)
     */
    public static String getSqlOnThread() {
        if (getInformationMapOnThread() == null) {
            return null;
        }
        return (String)getInformationMapOnThread().get(KEY_SQL);
    }

    /**
     * Set sql on thread.
     * 
     * @param sql SQL. (NotNull)
     */
    public static void setSqlOnThread(String sql) {
        if (sql == null) {
            String msg = "The argument[sql] must not be null.";
            throw new IllegalArgumentException(msg);
        }
        if (getInformationMapOnThread() == null) {
            final Map${database.filterGenericsString('String, Object')} contextMap = new LinkedHashMap${database.filterGenericsString('String, Object')}();
            _threadLocal.set(contextMap);
        }
        getInformationMapOnThread().put(KEY_SQL, sql);
    }

    /**
     * Get exception on thread.
     * 
     * @return Exception. (NotNull)
     */
    public static Exception getExceptionOnThread() {
        if (getInformationMapOnThread() == null) {
            return null;
        }
        return (Exception)getInformationMapOnThread().get(KEY_EXCEPTION);
    }

    /**
     * Set exception on thread.
     * 
     * @param exception Exception. (NotNull)
     */
    public static void setExceptionOnThread(Exception exception) {
        if (exception == null) {
            String msg = "The argument[e] must not be null.";
            throw new IllegalArgumentException(msg);
        }
        if (getInformationMapOnThread() == null) {
            final Map${database.filterGenericsString('String, Object')} contextMap = new LinkedHashMap${database.filterGenericsString('String, Object')}();
            _threadLocal.set(contextMap);
        }
        getInformationMapOnThread().put(KEY_EXCEPTION, exception);
    }

    /**
     * Is existing dao-exception on thread?
     * 
     * @return Determination.
     */
    public static boolean isExistDaoExceptionOnThread() {
        return (_threadLocal.get() != null);
    }

    /**
     * Clear dao-exception on thread.
     */
    public static void clearDaoExceptionOnThread() {
        _threadLocal.set(null);
    }
}
