package ${glPackageBaseCommonS2Dao};
#if (${database.isStatementResultSetTypeValid()})

import java.sql.Connection;
import java.sql.PreparedStatement;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.seasar.extension.jdbc.impl.BasicStatementFactory;
import org.seasar.framework.exception.SQLRuntimeException;

#else

import java.sql.Connection;
import java.sql.PreparedStatement;

import org.seasar.extension.jdbc.impl.BasicStatementFactory;
import org.seasar.extension.jdbc.util.ConnectionUtil;
#end

/**
 * Statement factory.
 * 
 * @author ${database.ClassAuthor}
 */
public class ${glDaoStatementFactory} extends BasicStatementFactory {
#if (${database.isStatementResultSetTypeValid()})

    /** Log-instance. */
    private static final Log _log = LogFactory.getLog(${glDaoStatementFactory}.class);

    public PreparedStatement createPreparedStatement(Connection con, String sql) {
        try {
            if (_log.isDebugEnabled()) {
                _log.debug("@StatementFactory: con.prepareStatement(sql, ${database.StatementResultSetType}, ${database.StatementResultSetConcurrency});");
            }
            return con.prepareStatement(sql, ${database.StatementResultSetType}, ${database.StatementResultSetConcurrency});
        } catch (SQLException e) {
            throw new SQLRuntimeException(e);
        }
    }
#else

    public PreparedStatement createPreparedStatement(Connection con, String sql) {
        return ConnectionUtil.prepareStatement(con, sql);
    }
#end

}
