#set ($myClassName = "${myBaseDaoClassName}")

package ${myBaseDaoPackageName};

import ${glPackageExtendedEntity}.${myExtendedObjectClassName};
#set ($InterfaceName = "")
#if ($table.hasPrimaryKey())
  #set ($InterfaceName = "${glPackageBaseCommon}.${glDaoWritableInterfaceName}")
#else
  #set ($InterfaceName = "${glPackageBaseCommon}.${glDaoReadableInterfaceName}")
#end

/**
 * The dao interface of ${table.Name}.
 * 
 * <pre>
 * [primary-key]
 *     ${table.PrimaryKeyNameCommaString}
 * 
 * [column-property]
 *     ${table.ColumnNameCommaString}
 * 
 * [foreign-property]
 *     ${table.ForeignPropertyNameCommaString}
 * 
 * [refferer-property]
 *     ${table.ReferrerPropertyNameCommaString}
 * 
 * [sequence]
 *     ${table.DefinedSequenceName}
 * 
 * [identity]
 *     ${table.IdentityPropertyName}
 * 
 * [update-date]
 *     ${table.UpdateDateJavaName}
 * 
 * [version-no]
 *     ${table.VersionNoJavaName}
 * 
 * </pre>
 * 
 * @author ${database.ClassAuthor}
 */
public interface ${myClassName} extends ${InterfaceName} {

    /** BEAN-Annotation. */
    public Class BEAN = ${glPackageExtendedEntity}.${myExtendedObjectClassName}.class;

    /** SQL-Annotation for getCountAll(). */
    public static final String getCountAll_SQL = "select count(*) from ${table.Name}";

    /**
     * Get count as all.
     * 
     * @return All count.
     */
    public int getCountAll();

    /** SQL-Annotation for getListAll(). */
    public static final String getListAll_SQL = "select * from ${table.Name}";

    /**
     * Get list as all.
     * 
     * @return All list. (NotNull)
     */
    public java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} getListAll();
#if ($table.hasPrimaryKey())

    /** SQL-Annotation for getEntity(). */
    public static final String getEntity_SQL = "select * from ${table.Name} where ${table.PrimaryKeyWhereStringWithSqlComment}";

    /** Args-Annotation for getEntity(). */
    public static final String getEntity_ARGS = "${table.PrimaryKeyUncapitalisedJavaNameCommaString}";

    public ${myExtendedObjectClassName} getEntity(${table.PrimaryKeyArgsString});
#end

    /**
     * Select count by condition-bean.
     * Ignore fetchFirst() and fetchScope() and fetchPage(). But the fetch status of the condition-bean remains as it is.
     * This select method generates SQL based on condition-bean.
     * <pre>
     * Example)
     *   final ${myConditionBeanClassName} ${glAttachedCBArgsVariableName} = new ${myConditionBeanClassName}();
     *   ${glAttachedCBArgsVariableName}.query().setXxx_GreaterEqual(new BigDecimal(14));
     *   final int count = dao.${database.ConditionBeanSelectCountMethodName}(${glAttachedCBArgsVariableName});
     * </pre>
     * 
     * @param ${glAttachedCBArgsVariableName} Condition-bean. (NotNull)
     * @return Selected count. (NotNull)
     */
    public int selectCountIgnoreFetchScope(${myAttachedCBArgsString});

    /**
     * Select entity '${myExtendedObjectClassName}' by condition-bean.
     * This select method generates SQL based on condition-bean.
     * <pre>
     * Example)
     *   final ${myConditionBeanClassName} ${glAttachedCBArgsVariableName} = new ${myConditionBeanClassName}();
     *   ${glAttachedCBArgsVariableName}.query().setXxxCode_Equal("abc");// It is assumed that this is the primary key...
     *   ${glAttachedCBArgsVariableName}.lockForUpdate();
     *   final ${myExtendedObjectClassName} entity = dao.selectEntity(${glAttachedCBArgsVariableName});
     * </pre>
     * 
     * @param ${glAttachedCBArgsVariableName} Condition-bean. (NotNull)
     * @return Selected entity. If the select result is zero, it returns null. (Nullable)
     */
    public ${myExtendedObjectClassName} selectEntity(${myAttachedCBArgsString});

    /**
     * Select list by condition-bean.
     * This select method generates SQL based on condition-bean.
     * <pre>
     * Example)
     *   final ${myConditionBeanClassName} ${glAttachedCBArgsVariableName} = new ${myConditionBeanClassName}();
     *   ${glAttachedCBArgsVariableName}.setupSelect_Xxx(); // Including the foreign table in select clause
     *   ${glAttachedCBArgsVariableName}.query().setXxxName_PrefixSearch("abc");
     *   ${glAttachedCBArgsVariableName}.query().setXxxStartDate_IsNotNull();
     *   ${glAttachedCBArgsVariableName}.addOrderBy_PK_Asc().fetchFirst(20);
     *   final List resultList = dao.selectList(${glAttachedCBArgsVariableName});
     * </pre>
     * 
     * @param ${glAttachedCBArgsVariableName} Condition-bean. (NotNull)
     * @return Selected list. If the select result is zero, it returns empty list. (NotNull)
     */
    public java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} selectList(${myAttachedCBArgsString});

#if ($table.hasPrimaryKey())

    /**
     * Insert one entity.
     * 
     * @param entity Entity. (NotNull)
     * @return Inserted count.
     */
    public int insert(${myExtendedObjectClassName} entity);

    /**
     * Update one entity.
     * 
     * @param entity Entity. (NotNull)
     * @return Updated count.
     */
    public int update(${myExtendedObjectClassName} entity);

    /**
     * Delete one entity.
     * 
     * @param entity Entity. (NotNull)
     * @return Deleted count.
     */
    public int delete(${myExtendedObjectClassName} entity);

    /**
     * Insert several entities.
     * 
     * @param entityList Entity-list. (NotNull)
     * @return Inserted count.
     */
    public int insertList(java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} entityList);

    /**
     * Update several entities.
     * 
     * @param entityList Entity-list. (NotNull)
     * @return Updated count.
     */
    public int updateList(java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} entityList);

    /**
     * Delete several entities.
     * 
     * @param entityList Entity-list. (NotNull)
     * @return Deleted count.
     */
    public int deleteList(java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} entityList);
#end

#if ($table.isUseSequence())

    /** SQL-Annotation for selectNextVal(). */
    public String selectNextVal_SQL = "${table.SequenceNextSql}";

    /**
     * Select next value as sequence.
     * 
     * @return Next value. (NotNull)
     */
    public java.math.BigDecimal selectNextVal();
#end
}
