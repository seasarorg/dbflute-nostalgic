##
## Copyright 2004-2013 the Seasar Foundation and the Others.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8" />
	<title>${database.projectName} schema</title>
#if ($database.isSchemaHtmlStyleSheetEmbedded())
	<style type="text/css">
${database.schemaHtmlStyleSheetEmbedded}
	</style>
#elseif ($database.isSchemaHtmlStyleSheetLink())
	${database.schemaHtmlStyleSheetLink}
#else
	<style type="text/css">
* {
	margin: 0;
	padding: 0;
}
body {
	font-family: Verdana, "Hiragino Kaku Gothic Pro", "ヒラギノ角ゴ Pro W3", Meiryo, "メイリオ", "MS P Gothic", "MS Pゴシック", sans-serif;
	font-size: 80%;
	margin: 10px 5px 5px 15px;
	background-color: #ffffe0;
}

/* heading */
h1 {
	font-size: 1.5em;
	border-bottom: 2px solid #af0000;
	border-top: 2px solid #af0000;
}
h2 {
	margin: 30px 0 5px 0;
	font-size: 1.8em;
	border-bottom: 2px solid #af0000;
	border-left: 10px solid #af0000;
	text-indent: 10px;
}
h3 {
	padding: 0 0 0 10px;
	margin: 1em 10% 0 0;
	border-top: double 3px #af0000;
	border-bottom: solid 1px #333333;
	font-size: 1.5em;
	color: #333333;
}
h4 {
	padding: 0 0 0 10px;
	margin: 1em 10% 0 1em;
	border-top: solid 1px #af0000;
	border-bottom: solid 1px #af0000;
	font-size: 1.4em;
	color: #333333;
}

/* total info */
.updatedate {
	text-align: right;
}
.mainschema {
	text-align: right;
}
.sublink {
	text-align: right;
}

/* table */
table {
	border-collapse:collapse;
}
table, th {
	border: 1px solid #555;
}
th {
	background-color: #cc9;
	font-size: 0.8em;
}
td {
	border-bottom: 1px dotted #aaa;
	border-left: 1px solid #555;
	padding:2px;
}
.tablecomment {
	font-size: 0.8em;
	color: #3F7E5E;
	padding:0 0 0.2em 1em;
}
.rownumhead {
	text-align: center;
	font-size: 0.4em;
}
.rownumcell {
	text-align: center;
	font-size: 0.4em;
	color: #444;
}
.schemacell {
	font-size: 0.8em;
	white-space: nowrap;
}
.aliascell {
	white-space: nowrap;
}
.flgcell {
	text-align: center;
}
.flgplus {
	font-size: 0.7em;
}
.typecell {
	font-size: 0.6em;
}
.sizecell {
	text-align: center;
	font-size: 0.8em;
}
.defvalcell {
	text-align: center;
	font-size: 0.6em;
}
.relcell {
	font-size: 0.7em;
}
.commentcell {
	font-size: 0.7em;
	color: #3F7E5E;
}
.subcell {
	font-size: 0.6em;
}
.comcolcell {
	color: #666;
}
.optcell {
	font-style: italic;
}
.additionalpk {
	font-style: italic;
}
.additionalfk {
	font-style: italic;
}
.clstypecell {
	text-align: center;
	font-size: 0.8em;
}
.commentdesc {
	color: #3F7E5E;
}

/* inner table */
table.child {
	margin: 3px;
}
table.child th {
	font-size: 0.7em;
}
table.child, table.child td, table.child th {
	border-top: none;
	border-left: none;
	border-bottom: 1px solid #aaa;
	border-right: 1px solid #aaa;
}
.clsgroup {
	font-size: 1.2em;
	padding-left: 4px;
	padding-right: 4px;
}

/* table supplementary info */
span.tableschema {
	font-size: 0.6em;
}
span.bqpcount {
	font-size: 0.5em;
}
dl.bqplist {
	padding-left: 2em;
}
dl.bqplist dt {
	display: list-item;
	font-size: 1.3em;
	margin-top: 0.3em;
}
dl.bqplist dd {
	padding-left: 1em;
}
dl.bqplist dd pre {
	font-size: 1.1em;
}
dl.bqplist dd.subinfo {
	padding-left: 2em;
}
dl.bqplist dd.subinfo span.sqlap {
	font-style: italic;
	color: #002266;
}
dl.bqplist dd.subinfo span.file {
	font-style: italic;
	color: #002266;
}
dl.bqplist dd.subinfo span.ctet {
	color: green;
}
dl.bqplist dd.subinfo span.pmb {
	color: green;
}
dl.procedurelist {
	padding-left: 2em;
}
dl.procedurelist dt {
	display: list-item;
	font-size: 1.3em;
	margin-top: 0.3em;
}
dl.procedurelist dt span.type {
	font-size: 0.7em;
	color: green;
}
dl.procedurelist dd {
	padding-left: 1em;
}
dl.procedurelist dd pre {
	font-size: 1.1em;
}
dl.procedurelist dd.column {
	font-style: italic;
	padding-left: 2em;
}
dl.procedurelist dd.column span.attrs {
	font-size: 0.7em;
	color: #125699;
}
dl.procedurelist dd.column span.type {
	font-size: 0.9em;
	color: green;
}
dl.procedurelist dd.column pre {
	padding-left: 1em;
}
	</style>
#end
#if ($database.isSchemaHtmlJavaScriptEmbedded())
	<script type="text/javascript">
${database.schemaHtmlJavaScriptEmbedded}
	</script>
#elseif ($database.isSchemaHtmlJavaScriptLink())
	${database.schemaHtmlJavaScriptLink}
#end
</head>

<body>
<h1>Schema for ${database.projectName} (${database.databaseName})</h1>
#if ($database.hasDatabaseSchema())
<p class="mainschema">generated from <strong>${database.databaseSchema.catalogSchema}</strong></p>
#end
#if ($database.hasClassificationDefinition())
<p class="sublink"><a href="#cdef">Classification Definition</a></p>
#end
#if ($database.isSchemaHtmlOutsideSqlValid())
<p class="sublink"><a href="#outsidesql">OutsideSql List</a></p>
#end
#if ($database.isSchemaHtmlProcedureValid())
<p class="sublink"><a href="#procedure">Procedure List</a></p>
#end

#set ($hasAdditionalSchema = $database.hasAdditionalSchema())
#set ($isAliasDelimiterInDbCommentValid = $database.isAliasDelimiterInDbCommentValid())
#set ($hasTableComment = $database.hasTableComment())
<h2>Table List</h2>
<table summary="Tables in the Schema">
	<thead>
	<tr>
		<th class="rownumhead">No.</th>
#if ($hasAdditionalSchema)
		<th>Schema</th>
#end
#if ($isAliasDelimiterInDbCommentValid)
		<th>Alias</th>
#end
		<th>Name</th>
		<th>Type</th>
		<th>ForeignTable</th>
		<th>ReferrerTable</th>
#if ($hasTableComment)
		<th>TableComment</th>
#end
		<th>EntityName</th>
	</tr>
	</thead>
	<tbody>
#set ($rownum = 1)
#foreach ($table in $database.tableDisplaySortedList)
	<tr>
		<td class="rownumcell">${rownum}</td>
#if ($hasAdditionalSchema)
		<td class="schemacell">#if ($table.hasSchema()) ${table.documentSchema}#else &nbsp;#end</td>
#end
#if ($isAliasDelimiterInDbCommentValid)
		<td class="aliascell">${table.alias}</td>
#end
		<td><a href="#${table.tableIdForSchemaHtml}"${table.titleForSchemaHtml}>${table.tableDispName}</a></td>
		<td class="typecell">${table.type}</td>
		<td class="relcell">${table.foreignTableNameCommaStringWithHtmlHref}</td>
		<td class="relcell">${table.referrerTableNameCommaStringWithHtmlHref}</td>
#if ($hasTableComment)
		<td class="commentcell">#if ($table.hasComment()) ${table.commentForSchemaHtml}#else &nbsp;#end</td>
#end
		<td class="subcell">${table.javaName}</td>
	</tr>
#set ($rownum = $rownum + 1)
#end
	</tbody>
</table>

#foreach ($table in $database.tableDisplaySortedList)
  $generator.parse("doc/html/table.vm", null, "table", $table)
#end

#if ($database.hasClassificationDefinition())
<h2 id="cdef">Classification Definition</h2>
<table summary="Classifications in the Schema">
	<thead>
	<tr>
		<th>Classification</th>
		<th>Type</th>
		<th>Top Comment</th>
		<th>Definition</th>
	</tr>
	</thead>
	<tbody>
#foreach ($classificationName in $database.classificationNameList)
#set ($classificationTop = $database.getClassificationTop($classificationName))
	<tr>
		<td>${classificationName}</td>
		<td class="clstypecell">#if ($classificationTop.isTableClassification())table#else implicit#if ($classificationTop.isCheckImplicitSet())<br />(check)#end#end</td>
		<td>#if ($classificationTop.hasTopComment())${classificationTop.topCommentForSchemaHtml}#else &nbsp;#end</td>
		<td>
			<table class="child">
			<tr>
				<th id="${classificationName}Cls">Code</th>
				<th>Name</th>
#if ($database.hasClassificationAlias($classificationName))
				<th>Alias</th>
#end
				<th>Comment</th>
#foreach ($group in $classificationTop.groupList)
				<th><span class="clsgroup"${group.groupTitleForSchemaHtml}>${group.groupName}</span></th>
#end
#if ($classificationTop.hasSisterCode())
				<th>Sisters</th>
#end
#if ($classificationTop.hasSubItem())
				<th>SubItem</th>
#end
			</tr>
#foreach ($classificationElement in $classificationTop.classificationElementList)
			<tr>
				<td>${classificationElement.code}</td>
				<td>${classificationElement.name}</td>
#if ($database.hasClassificationAlias($classificationName))
				<td>#if ($classificationElement.hasAlias())${classificationElement.alias}#else &nbsp;#end</td>
#end
				<td class="commentcell">#if ($classificationElement.hasComment())${classificationElement.commentForSchemaHtml}#else &nbsp;#end</td>
#foreach ($group in $classificationTop.groupList)
				<td class="flgcell">#if ($classificationElement.isGroup($group.groupName))o#else &nbsp;#end</td>
#end
#if ($classificationTop.hasSisterCode())
				<td>${classificationElement.buildSisterCodeExpForSchemaHtml()}</td>
#end
#if ($classificationTop.hasSubItem())
				<td>${classificationElement.buildSubItemExpForSchemaHtml()}</td>
#end
			</tr>
#end
			</table>
		</td>
	</tr>
#end
	</tbody>
</table>
#end

#if ($database.isSchemaHtmlOutsideSqlValid())
<h2 id="outsidesql">OutsideSql List</h2>
#foreach ($table in $database.tableDisplaySortedList)
#if ($table.hasBehaviorQueryPath())
<h3 id="${table.tableIdForSchemaHtml}_sql"><a href="#${table.tableIdForSchemaHtml}">${table.tableDispName}</a></h3>
<dl class="bqplist">
#foreach ($behaviorQueryPath in $table.behaviorQueryPathList)
	<dt>$table.getBehaviorQueryPathTitleForSchemaHtml($behaviorQueryPath)$table.getBehaviorQueryPathDisplayName($behaviorQueryPath)</dt>
#if ($table.hasBehaviorQueryPathDescription($behaviorQueryPath))
	<dd>
		<pre class="commentdesc">$table.getBehaviorQueryPathDescriptionForSchemaHtml($behaviorQueryPath)</pre>
	</dd>
#end
	<dd class="subinfo">
#if ($table.isBehaviorQueryPathSqlAp($behaviorQueryPath))
        <span class="sqlap">(${table.getBehaviorQueryPathSqlApProjectName($behaviorQueryPath)})</span>
#end
		<span class="file">$table.getBehaviorQueryPathFileName($behaviorQueryPath)</span>
#if ($table.hasBehaviorQueryPathCustomizeEntity($behaviorQueryPath))
		<span class="ctet">(${table.getBehaviorQueryPathCustomizeEntity($behaviorQueryPath)}${table.getBehaviorQueryPathCursorForSchemaHtml($behaviorQueryPath)})</span>
#end
#if ($table.hasBehaviorQueryPathParameterBean($behaviorQueryPath))
		<span class="pmb">(${table.getBehaviorQueryPathParameterBean($behaviorQueryPath)})</span>
#end
	</dd>
#end
</dl>
#end
#end
#end
#if ($database.isSchemaHtmlProcedureValid())
<h2 id="procedure">Procedure</h3>
#set ($hasSeveralProcedureSchema = $database.hasSeveralProcedureSchema())
#foreach ($procedureEntry in $database.availableSchemaProcedureMap.entrySet())
#set ($procedureSchema = $procedureEntry.key)
#set ($procedureList = $procedureEntry.value)
#if ($hasSeveralProcedureSchema)
	<h3>${procedureSchema}</h3>
#end
<dl class="procedurelist">
#foreach ($procedure in $procedureList)
	<dt>${procedure.procedureDisplayNameForSchemaHtml}</dt>
#if ($procedure.hasProcedureComment())
	<dd>
		<pre class="commentcell">${procedure.procedureCommentForSchemaHtml}</pre>
	</dd>
#end
#if ($procedure.procedureColumnList.isEmpty())
	<dd class="column">*no arguments</dd>
#else
#foreach ($column in $procedure.procedureColumnList)
	<dd class="column">
		${column.columnDisplayNameForSchemaHtml}
#if ($column.hasColumnComment())
		<pre class="commentdesc">${column.columnCommentForSchemaHtml}</pre>
#end
	</dd>
#end
#end
#end
</dl>
#end
#end
</body>
</html>
